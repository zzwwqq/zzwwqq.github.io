<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[子网划分的经典实例]]></title>
    <url>%2F%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B.html</url>
    <content type="text"><![CDATA[案例:例1:一家集团公司有12家子公司，每家子公司又有4个部门。上级给出一个172.16.0.0/16的网段，让给每家子公司以及子公司的部门分配网段。 例2:某集团公司给下属子公司甲分配了一段IP地址192.168.5.0/24，现在甲公司有两层办公楼（1楼和2楼），统一从1楼的路由器上公网。1楼有100台电脑联网，2楼有53台电脑联网。如果你是该公司的网管，你该怎么去规划这个IP？ 例3:请问 192.168.10.0/26 有多少子网?每个子网有多少主机?有多少合法子网?每个子网的广播地址是多少?哪些是合法主机号? 分析:例1：通过子网数来划分子网，未考虑主机数。 例2：通过计算主机数来划分子网。 例1 思路：既然有12家子公司，那么就要划分12个子网段，但是每家子公司又有4个部门，因此又要在每家子公司所属的网段中划分4个子网分配给各部门。 例1步骤：A. 先划分各子公司的所属网段。 有12家子公司，那么就有2的n次方≥12，n的最小值=4。因此，网络位需要向主机位借4位。那么就可以从172.16.0.0/16这个大网段中划出2的4次方=16个子网。 详细过程： 先将172.16.0.0/16用二进制表示 10101100.00010000.00000000.00000000/16 借4位后（可划分出16个子网）： 1) 10101100. 00010000 . 00000000.00000000/20【172.16.0.0/20】 2) 10101100.00010000.00010000.00000000/20【172.16.16.0/20】 3) 10101100.00010000.00100000.00000000/20【172.16.32.0/20】 4) 10101100.00010000.00110000.00000000/20【172.16.48.0/20】 5) 10101100.00010000.01000000.00000000/20【172.16.64.0/20】 6) 10101100.00010000.01010000.00000000/20【172.16.80.0/20】 7) 10101100.00010000.01100000.00000000/20【172.16.96.0/20】 8) 10101100.00010000.01110000.00000000/20【172.16.112.0/20】 9) 10101100.00010000.10000000.00000000/20【172.16.128.0/20】 10) 10101100.00010000.10010000.00000000/20【172.16.144.0/20】 11) 10101100.00010000.10100000.00000000/20【172.16.160.0/20】 12) 10101100.00010000.10110000.00000000/20【172.16.176.0/20】 13) 10101100.00010000.11000000.00000000/20【172.16.192.0/20】 14) 10101100.00010000.11010000.00000000/20【172.16.208.0/20】 15) 10101100.00010000.11100000.00000000/20【172.16.224.0/20】 16) 10101100.00010000.11110000.00000000/20【172.16.240.0/20】 我们从这16个子网中选择12个即可，就将前12个分给下面的各子公司。每个子公司最多容纳主机数目为2的12次方-2=4094。 B. 再划分子公司各部门的所属网段 以甲公司获得172.16.0.0/20为例，其他子公司的部门网段划分同甲公司。 有4个部门，那么就有2的n次方≥4，n的最小值=2。因此，网络位需要向主机位借2位。那么就可以从172.16.0.0/20这个网段中再划出2的2次方=4个子网，正符合要求。 详细过程： 先将172.16.0.0/20用二进制表示 \10101100. 00010000. 00000000.00000000/20 借2位后（可划分出4个子网）： ① 10101100.00010000.00000000.00000000/22【172.16.0.0/22】 ② 10101100.00010000.00000100.00000000/22【172.16.4.0/22】 ③ 10101100.00010000.00001000.00000000/22【172.16.8.0/22】 ④ 10101100.00010000.00001100.00000000/22【172.16.12.0/22】 将这4个网段分给甲公司的4个部门即可。每个部门最多容纳主机数目为2的10次方-2=1024 例2思路:我们在划分子网时优先考虑最大主机数来划分。在本例中，我们就先使用最大主机数来划分子网。101个可用IP地址，那就要保证至少7位的主机位可用（2的m次方-2≥101，m的最小值=7）。如果保留7位主机位，那就只能划出两个网段，剩下的一个网段就划不出来了。但是我们剩下的一个网段只需要2个IP地址并且2楼的网段只需要54个可用IP，因此，我们可以从第一次划出的两个网段中选择一个网段来继续划分2楼的网段和路由器互联使用的网段。 例2 步骤：根据需求，画出下面这个简单的拓扑。将192.168.5.0/24划成3个网段，1楼一个网段，至少拥有101个可用IP地址；2楼一个网段，至少拥有54个可用IP地址；1楼和2楼的路由器互联用一个网段，需要2个IP地址。 A. 先根据大的主机数需求，划分子网因为要保证1楼网段至少有101个可用IP地址，所以，主机位要保留至少7位。 先将192.168.5.0/24用二进制表示： 11000000.10101000.00000101.00000000/24 主机位保留7位，即在现有基础上网络位向主机位借1位（可划分出2个子网）： ① 11000000.10101000.00000101.00000000/25【192.168.5.0/25】 ② 11000000.10101000.00000101.10000000/25【192.168.5.128/25】 1楼网段从这两个子网段中选择一个即可，我们选择192.168.5.0/25。 2楼网段和路由器互联使用的网段从192.168.5.128/25中再次划分得到。 B. 再划分2楼使用的网段2楼使用的网段从192.168.5.128/25这个子网段中再次划分子网获得。因为2楼至少要有54个可用IP地址，所以，主机位至少要保留6位（2的m次方-2≥54，m的最小值=6）。 先将192.168.5.128/25用二进制表示： 11000000.10101000.00000101.10000000/25 主机位保留6位，即在现有基础上网络位向主机位借1位（可划分出2个子网）： ① 11000000.10101000.00000101.10000000/26【192.168.5.128/26】 ② 11000000.10101000.00000101.11000000/26【192.168.5.192/26】 2楼网段从这两个子网段中选择一个即可，我们选择192.168.5.128/26。 路由器互联使用的网段从192.168.5.192/26中再次划分得到。 C. 最后划分路由器互联使用的网段路由器互联使用的网段从192.168.5.192/26这个子网段中再次划分子网获得。因为只需要2个可用IP地址，所以，主机位只要保留2位即可（2的m次方-2≥2，m的最小值=2）。 先将192.168.5.192/26用二进制表示： 11000000.10101000.00000101.11000000/26 主机位保留2位，即在现有基础上网络位向主机位借4位（可划分出16个子网）： ① 11000000.10101000.00000101.11000000/30【192.168.5.192/30】 ② 11000000.10101000.00000101.11000100/30【192.168.5.196/30】 ③ 11000000.10101000.00000101.11001000/30【192.168.5.200/30】 ………………………………… ④ 11000000.10101000.00000101.11110100/30【192.168.5.244/30】 ⑤ 11000000.10101000.00000101.11111000/30【192.168.5.248/30】 ⑥ 11000000.10101000.00000101.11111100/30【192.168.5.252/30】 路由器互联网段我们从这16个子网中选择一个即可，我们就选择192.168.5.252/30。 D. 整理本例的规划地址1楼：网络地址：【192.168.5.0/25】 最小地址为11000000 10101000 00000101 00000000 即 192.168.5.0 最大地址为11000000 10101000 00000101 01111111 即 192.168.5.127 主机位全0全1的不能作为主机IP，因为主机位全1 的要用来作 广播地址即192.168.5.127 剩下的可以分配作为主机的IP 主机IP地址：【192.168.5.1/25—192.168.5.126/25】 广播地址：【192.168.5.127/25】 2楼：网络地址：【192.168.5.128/26】 主机IP地址：【192.168.5.129/26—192.168.5.190/26】 广播地址：【192.168.5.191/26】 路由器互联： 网络地址：【192.168.5.252/30】 两个IP地址：【192.168.5.253/30、192.168.5.254/30】 广播地址：【192.168.5.255/30】 快速划分子网确定IP: 以例2为例：题目需要我们将192.168.5.0/24这个网络地址划分成能容纳101/54/2个主机的子网。因此我们要先确定主机位，然后根据主机位决定网络位，最后确定详细的IP地址。 ① 确定主机位 将所需要的主机数自大而小的排列出来：101/54/2，然后根据网络拥有的IP数目确定每个子网的主机位：如果2的n次方-2≥该网段的IP数目，那么主机位就等于n。于是，得到：7/6/2。 ② 根据主机位决定网络位 用32减去主机位剩下的数值就是网络位，得到：25/26/30。 ③ 确定详细的IP地址 在二进制中用网络位数值掩盖IP前面相应的位数，然后后面的为IP位。选取每个子网的第一个IP为网络地址，最后一个为广播地址，之间的为有效IP。得到： 【网络地址】 【有效IP】 【广播地址】 【192.168.5.0/25】【192.168.5.1/25-192.168.5.126/25】【192.168.5.127/25】 【192.168.5.128/26】【192.168.5.129/26-192.168.5.190/26】【192.168.5.191/26】 【192.168.5.192/30】【192.168.5.193/30-192.168.5.194/30】【192.168.5.195/30】 例3: 分析首先就是要理解/26的意思。首先一看就是个C类地址，所以其默认子网掩码是255.255.255.0。这个子网掩码是由3个.来分隔的，而且这是10进制表示出来的，把它化为2进制=11111111.11111111.11111111.00000000前面是24个1。所以默认的C类子网掩码被写成/24。 这道题是/26，也就是有26个1，写出来就是11111111.11111111.11111111.11000000。把它划成10进制就是255.255.255.192, 现在知道了子网掩码就可以回答那5个问题了 1.有多少个子网？ 这有个公式的。子网数目=2的X次方，这里的X是指掩码位数，掩码为数可以用我们现在的子网掩码的1的为数减去默认的1的位数。这道题有子网掩码有26个1，而C类默认有24个1，所以就是26-24=2。子网数=2的2次方=4 2.每个子网的主机数？ 这还是由公式的。子网主机数=2的Y次方-2，这里的Y是非掩码位的位数，即子网掩码中0的个数，刚才已经知道有26个1了，那剩下的就都是0了，一共有32位，现在有26个1剩下的就只有6个0。所以子网主机数=2的6次方-2=62 3.哪些是合法子网？ 这里牵扯了块这个概念，块=256 - 子网掩码。这里就是 - 192 ，所以这道题块=64 ，知道了块就把块从0开始加，一直加到256，这之间的数就是合法子网。0+64=64 64+64=128 128+62=192 192+64=256 所以合法子网就是0 64 128 192 4.每个子网的广播地址是多少？ 广播地址=下一个子网号-1 所以0子网的广播地址是63；64子网的广播地址是127；128子网的广播地址是191；192子网的广播地址是255 5.哪些是合法主机号？ 合法主机号是那些介于个子网之间的取值，并要减去全0和全1的主机号，例如：64是子网号码，127是广播地址，那么65–126就是合法地址。 所以0子网的合法地址是1–62；64子网的合法地址是65–126；128子网的合法地址是129==190；192子网的合法地址是193–254 总结:子网划分无非涉及到这些内容: 1.有多少子网 2.每个子网有多少主机 3.有多少合法子网 4.每个子网的广播地址是多少: 广播地址下一个子网号-1 5.哪些是合法主机号]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>子网划分实例</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识计算机网络]]></title>
    <url>%2F%E5%88%9D%E8%AF%86%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html</url>
    <content type="text"><![CDATA[前言: 计算机网络可以说是连通世界的桥梁，推动发展的催化剂，正是计算机网络技术让信息传播速度更快，让我们能随时随地在线看视频、听音乐、查资料、看新闻、分享资源,试想一下如果没有计算机网络这门学科，我们的世界还会有今天这么繁荣吗？ 计算机网络是什么？ 计算机网络技术是通信技术与计算机技术相结合的产物。计算机网络是按照网络协议，将地球上分散的、独立的计算机相互连接的集合。连接介质可以是电缆、双绞线、光纤、微波、载波或通信卫星。计算机网络具有共享硬件、软件和数据资源的功能，具有对共享数据资源集中处理及管理和维护的能力． 发展历史：其发展经历了四个阶段: ①:20世纪50~60年代，出现以单个计算机为中心的远程连机系统，构成面向终端的计算机网络； ②:20世纪60~70年代，出现了多个主计算机通过通信线路互连的计算机网络。ARPANET投入使用； ③:20世纪70~80年代，出现具有统一的网络体系结构，遵循国际标准化协议的计算机网络。 ④:从90年代算起，网络互联与高速网络。 我国在1980年开始进行计算机联网实验，1989年，我国第一个分组交换网CNPAC建成运行. 特点：①: 连通性 ②: 共享 分类：按作用范围分类:①: WAN（Wide Area Network）广域网：几十到几千KM ②: MAN（Metropolitan Area Network）城域网：一个城市（5~50KM） ③: LAN（Local Area Network）局域网：1KM左右 ④: PAN（Personal Area Network）个人区域网：10m左右 按传输介质分类:①: 有线网：是采用同轴电缆或双绞线连接的计算机网络。同轴电缆网是常见的一种连网方式，它比较经济，安装较为便利，传输率和抗干扰能力一般，传输距离较短。双绞线网是目前最常见的连网方式。它价格便宜，安装方便，但易受干扰，传输率较低，传输距离比同轴电缆要短。 ②: 光纤网：也是有线网的一种，但由于其特殊性而单独列出。光纤网采用光导纤维作传输介质。光纤传输距离长，传输率高，可达数千兆bps，抗干扰性强，不会受到电子监听设备的监听，是高安全性网络的理想选择。但其成本较高，且需要高水平的安装技术。 ③: 无线网：用电磁波作为载体来传输数据，目前无线网联网费用较高，还不太普及。但由于联网方式灵活方便，是一种很有前途的连网方式。 局域网通常采用单一的传输介质，而城域网和广域网采用多种传输介质。 按通信方式分类:①: 点对点传输网络：数据以点到点的方式在计算机或通信设备中传输。星型网、环形网采用这种传输方式。 ②: 广播式传输网络：数据在公用介质中传输。无线网和总线型网络属于这种类型。 应用:①: 通信服务: 如在线聊天（飞信,MSN、QQ等）、E-mail 、IP 电话等服务 ②: 多媒体信息服务: 包括网上娱乐、网络电视、电视会议、WWW服务、远程教育和音乐点播等。 ④: 办公自动化: 将一个单位的其它办公设备与办公用计算机连接成网络, 加强了外部和单位内部的沟通与联系，加快单位内部的信息流动，提高工作效率，并有利于减少日常开支。 ⑤: 网上交易: 在线购物,转账等]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络开篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用指令]]></title>
    <url>%2Fgit%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html</url>
    <content type="text"><![CDATA[一、初始化配置:1.1 指定客户端用户名和邮箱，为了标记是谁向远程库传送数据 $ git config --global user.name &quot;Your Name&quot; $ git config --global user.email &quot;email@example.com&quot; 1.2查看用户名：$ git config user.name 1.3查看邮箱： $ git config user.email 1.4修改用户名：$ git config --global user.name &quot;cyx&quot; 1.5修改邮箱： $ git config --global user.email &quot;328978553@qq.com&quot; 1.6查看配置是否生效： $ git config --list 二、目录文件相关:2.1创建目录： $ mkdir /d/softwear/Program （“mkdir” 是“make Directory”; “/d/softwear/”是要创建目录的位置 “Program” 是新创建的目录） 2.2定位到Program指定目录： $ cd /d/软件/Program 2.3输出当前目录地址： $ pwd 2.4让之前创建的目录作为git可操作的仓库，此时再去刚才创建的program目录下会发现多了一个.git目录： $ git init 2.5查看当前仓库的隐藏目录，以及文件： $ ls –ah 2.6查看当前仓库的文件： $ ls 三、本地仓库关联远程库:3.1关联Github远程库：$ git remote add origin git@server-name(服务器名即github用户名)/repo-name.git(远程仓库名.git) 如：$ git remote add origin git@zzwwqq/blog.git； 3.2关联码云远程库：$ git remote add origin git@gitee.com:zwqzeq/Login_Register.git 四、操作远程仓库:4.1显示远程库的详细信息： $git remote -v 4.2本地master分支内容推送到远程库的master分支： 第一次$ git push -u origin master 以后 直接$ git push origin master 4.3删除远程库： $ git remote rm origin (origin远程库默认名称，建议不改) 4.4从远程库克隆： $ git clone git@github.com:zwqzeq/gitskills.git 4.5将本地仓库指定分支合并到远程仓库指定分支： $ git push origin dev_branch : dev_branch 4.6强行让本地分支覆盖远程分支： $ git push 远程库名 远程库的分支名 -f 4.7将远程仓库的某个分支合并到当前本地分支： $ git pull 远程仓库名 远程仓库的分支名 五、文件保存和提交:5.1将文件从工作区添加到暂存区： $ git add &lt;file&gt; 5.2将文件从暂存区提交到版本库： $ git commit -m “提交说明” 5.3随时查看当前仓库的状态： $ git status 5.4查看修改了具体修改了那些内容： $ git diff &lt;file&gt; 六、日志相关：6.1查看提交历史（只有commit过的才能查到），以便确定要回退到哪个版本： $ git log 6.2如果嫌输出信息太多，看得眼花缭乱的，可以不显示详细信息： $ git log --pretty=oneline 6.3如果嫌输出信息太多，看得眼花缭乱的，可以不显示详细信息： $ git log --pretty=oneline --abbrev-commit 6.4查看命令历史（包括reset，commit，checkout），以便确定要回到未来的哪个版本（不包括从工作区添加（add）到暂存区的命令）： $ git reflog 七、版本回退:7.1退回到上一个版本： $ git reset --hard HEAD^ //针对版本库 7.2退回到上上个版本： $ git reset --hard HEAD^^ 7.3退回到上100个版本： $ git reset --hard HEAD~100 7.4退回到指定版本： $ git reset --hard commit_ID 7.5只丢弃暂存区修改： $ git reset HEAD &lt;file&gt; //针对暂存区，让暂存区恢复之前的状态 7.6只丢弃工作区的修改： $ git checkout --&lt;file&gt; //针对工作区，让工作区恢复之前的状态，即让工作区和暂存区一致，如果没有暂存区，则让工作区和版本库一致，如果该文件既没有添加到暂存区也没有提交到版本库，则工作区中该文件的修改不能被丢弃 八、分支相关:8.1查看分支： $ git branch 8.2创建分支： $ git branch &lt;name&gt; 8.3切换分支： $ git checkout &lt;name&gt;（注意与恢复文件的区别，此处checkout后面没有“–”） 8.4创建+切换分支： $ git checkout -b &lt;name&gt; 8.5合并某分支到当前分支： $ git merge &lt;name&gt; 8.6删除分支： $ git branch -d &lt;name&gt; 8.7重命名分支： $ git branch -m old_branch new_branch 8.8看到分支合并情况： $ git log --graph --pretty=oneline --abbrev-commit 8.9可以禁用快速合并dev方式： $ git merge --no-ff -m &quot;merge with no-ff&quot; dev 8.10删除一般的分支： $ git branch -d &lt;name&gt; 8.11丢弃一个没有被合并过的分支，可以通过： $ git branch -D &lt;name&gt; //强行删除 九、标签相关：9.1默认标签是打在当前分支最新提交的commit上: $ git tag &lt;name&gt; 9.2指定一个commit id，给其打上标签，即以后标签可代表commit id: $ git tag &lt;name&gt; commit_id 9.3查看所有标签名： $ git tag 9.4查看标签信息： $ git show &lt;tagname&gt; 9.5指定标签信息： $ git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot; commit_ID 9.6删除本地标签： $ git tag -d v0.1 9.7推送某个标签到远程（origin 是默认的远程库名，也可换成自定义的名字）： $ git push origin &lt;tagname&gt; 9.8推送所有标签到远程（origin 是默认的远程库名，也可换成自定义的名字）： $ git push origin --tags 9.9删除远程标签：如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除，然后，从远程删除： $ git tag -d v0.9 $ git push origin :refs/tags/v0.9 十、临时保存工作现场：10.1前工作现场“储藏（或称隐藏）”起来，等以后恢复现场后继续工作： $ git stash 10.2查看某个分支上隐藏工作区： $ git stash list 10.3恢复工作现场：两种方式： 方式一：用$ git stash apply恢复,但是恢复后,stash内容并不删除,你需要用$ git stash drop来删除； 方式二：用$ git stash pop,恢复的同时把stash内容也删了]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Git]]></title>
    <url>%2F%E5%88%9D%E8%AF%86Git.html</url>
    <content type="text"><![CDATA[前言: 你是否有这样的经历：写word文档时,想删除一部分内容，又怕将来想恢复找不回来怎么办？常见办法就是先把当前文件“另存为”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件.改到最后你自己都分不清,哪个文件里面是修改了什么. 如果有，那么恭喜你，以后不会再有这种事情发生了，git能帮你管理文件. git是什么?Git是目前世界上最先进的分布式版本控制系统（没有之一）. GIT的历史背景: 很多人都知道，Linus（李纳斯）在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。直到2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。 安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！ Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。 分布式的git和集中式的CVS/SVN对比:联网： 集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。集中式版本控制系统最大的毛病就是必须联网才能工作． 分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。 安全性： 和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。 如何安装？在Windows上使用Git，可以从Git官网直接下载安装程序，然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，(或者鼠标右键,可以找到git Bash)蹦出一个类似命令行窗口的东西，就说明Git安装成功.]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>初识Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo常用命令]]></title>
    <url>%2Fhexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[前言:​ 为了方便查阅,这里将常用指令汇总. 简写指令:hexo n &quot;我的博客&quot; 等价于 hexo new &quot;我的博客&quot; 还等价于 hexo new post &quot;我的博客&quot; #新建一篇文章hexo p 等价于 hexo publishhexo g 等价于 hexo generatehexo s等价于 hexo serverhexo d 等价于 hexo deployhexo deploy -g 等价于 hexo deploy --generatehexo generate -d等价于hexo generate --deploy 注: hexo clean 没有 简写, git –version 没有简写 指令说明:hexo server #Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。hexo server -s #以静态模式启动hexo server -p 5000 #更改访问端口 (默认端口为4000，’ctrl + c’关闭server)hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹hexo g #生成静态网页 (执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下)hexo d #将本地数据部署到远端服务器(如github)hexo init 文件夹名称 #初始化XX文件夹名称npm update hexo -g#升级npm install hexo -g#安装node-v #查看node.js版本号npm -v #查看npm版本号git --version #查看git版本号hexo -v #查看hexo版本号 hexo publish [layout] &lt;title&gt; #通过 publish 命令将草稿移动到 source/_posts 文件夹,如:$ hexo publish [layout] &lt;title&gt;,草稿默认是不会显示在页面中的，可在执行时加上 --draft 参数，或是把 render_drafts 参数设为 true来预览草稿。 hexo new aaa &quot;bbb&quot; # 新建一篇文章,文章名称和标题分别为bbb.md 和 bbb. 文章采用aaa布局, 此时会在站点根目录下的—-&gt;source—–&gt;_post文件夹下生成bbb.md文件, bbb.md文件的顶部(—–分割线上方区域,也称作Front matter区),生成 layout: aaatitle:date:]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo常用指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的next主题个性化配置]]></title>
    <url>%2Fhexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[前言: 如果你觉得我的博客界面不错，你可以参考这篇文章，在这篇文章中总结了几十个个性化配置，并不是都要安装，取你所需即可． 一、常用的个性化配置汇总： １．更换主题 ２．设置语言 ３．字数统计和阅读时长(网站底部/文章内) ４．添加busuanzi: 统计浏览次数（本站总访客数，本站总访问量） ５．本站已安全运行 XX天 XX小时XX分XX秒 ６．添加评论系统(常见的有: 网易云跟帖但现在已失效，来必力，valine) ,这里以valine为例 ７．添加热度（文章阅读次数） ８．为博客加上宠物 ９．鼠标点击出现桃心效果 １０．网页底部的动态桃心图像 １１．添加顶部加载条 １２．设置网站的图标Favicon １３．DaoVoice 在线联系 １４．添加AddThis分享 １５．添加打赏 １６．文章加密访问 １７．在文章底部增加版权信息 １８．修改文章底部的那个带#号的标签 １９．在每篇文章末尾添加“本文结束”标记 ２０．修改作者头像并旋转 ２１．隐藏网页底部powered By Hexo / 强力驱动 ２２．在右上角或者左上角实现fork me on github ２３．修改代码块自定义样式（设置代码高亮主题） ２４．开启代码块复制 ２５．侧边栏社交链接 ２６．图片处理(使用七牛云为Hexo存储图片等静态资源) ２７．修改背景图,以及侧边栏顶部颜色 ２８．侧边栏添加网易云音乐 ２９．底部添加公网安备 ３０．取消“文章目录”的自动编号 ３１．封面模式 １．更换主题: (以next主题为例)注: next 主题的 github仓库地址迁移了 １．１ 下载主题:旧版本next主题地址: 5以下的版本包含5: 旧版本5以下 安装指令: 首先打开git bash进入根目录即 “ /blog/“ 执行命令:git clone https://github.com/iissnan/hexo-theme-next themes/next 此时会从next主题的作者的github仓库克隆next主题到 我们本地的 /blog/theme/next文件夹下 最新版在这里下载: 新版本6开始 安装指令: 同上 git clone https://github.com/theme-next/hexo-theme-next themes/next 安装完成后，打开 站点配置文件,找到 theme 字段，并将其值更改为 next, 一定要保存 依次执行git clean，git g,git s 然后查看运行结果: nexT主题有四种选择，上面这个只是最简洁的一种，我选择的是Gemini布局。 １．２ 修改主题配置文件： 然后重新git clean，git g，git s查看效果: ２．设置语言：在站点配置文件中设置语言: 12language: zh-Hans next5以下版本(包含)language: zh-CN next6以上版本(包含) ３．字数统计和阅读时长(网站底部/文章内):３．１ 首先安装插件: $ npm install hexo-symbols-count-time --save ３．２ 然后修改主题配置文件如下: 123456symbols_count_time: separated_meta: true ＃显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字 item_text_post: true ＃显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字 item_text_total: true ＃底部footer是否显示字数统计属性文字(如站点总字数,站点阅读时长 ≈ 1 分钟) awl: 4 ＃计算字数的一个设置,没设置过 wpm: 275 ＃一分钟阅读的字数 ３．３ 站点配置文件中添加： 1234567symbols_count_time: #文章内是否显示 symbols: true time: true # 网页底部是否显示 total_symbols: true total_time: true 注意: 配置文件中的空格** ４．添加busuanzi: 统计浏览次数（本站总访客数，本站总访问量）打开/blog/themes/next/layout/_partials/footer.swig 在文件底部添加下面的代码: 12345678910&lt;div class="powered-by"&gt;&lt;i class="fa fa-user-md"&gt;&lt;/i&gt;&lt;span id="busuanzi_container_site_uv"&gt; 本站总访客数:&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;| &lt;/span&gt;&lt;span id="busuanzi_container_site_pv"&gt; &amp;nbsp;本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次&lt;/span&gt;&lt;/div&gt;&lt;/div&gt; ５．本站已安全运行 XX天 XX小时XX分XX秒打开/blog/themes/next/layout/_partials/footer.swig 在文件底部添加下面的代码: 12345678910111213141516&lt;script&gt; var now = new Date(); function createtime() &#123; var grt= new Date("03/12/2019 12:00:00");//此处修改你的建站时间或者网站上线时间 now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if(String(hnum).length ==1 )&#123;hnum = "0" + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = "0" + mnum;&#125; seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; document.getElementById("timeDate").innerHTML = "本站已安全运行 "+dnum+" 天 "; document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒"; &#125; setInterval("createtime()",250);&lt;/script&gt; ６．添加评论系统(常见的有: 网易云跟帖但现在已失效，来必力，valine) ,这里以valine为例:先注册leancloud账号,获取自己的appid,appkey 打开主题配置文件,修改如下: 1234567891011valine: enable: true # 为true时启用评论 appid: # 这里填写上面得到的APP ID 注意空一格再输入ID和key, appkey: # 这里填写上面得到的APP KEY notify: false # 邮件通知 verify: false # 验证码 placeholder: #评论框中预设的文字,随意填写 avatar: mm # gravatar style 头像,采用gravatar头像,到http://cn.gravatar.com/了解 guest_info: nick,mail,link # custom comment header 访客信息,显示在评论框上面,三者可随意选择或全选 pageSize: 10 # pagination size 评论分页大小 visitor: false # ７．添加热度（文章阅读次数）修改主题配置文件 1234leancloud_visitors: enable: true app_id: #填入你leancloud账号的appid app_key: #填入你leancloud账号的appkey 打开/blog/themes/next/layout/_macro/post.swig,在画红线的区域添加℃： 然后打开，/blog/themes/next/languages/zh-Hans.yml,将画红框的改为热度就OK了 ８．为博客加上宠物８．１ 在hexo根目录下安装插件: $ npm install -save hexo-helper-live2d ８．２ 安装需要的宠物插件:宠物样式 源码地址 $ npm install {packagename} 其中{packagename} 替换为你要安装的宠物名,如live2d-widget-model-shizuku 具体指令: $ npm install live2d-widget-model-shizuku ８．３ 在站点配置文件中加上如下代码: 1234567891011live2d: enable: true #开启宠物 scriptFrom: local model: use: live2d-widget-model-shizuku display: position: right #指定宠物显示的位置 width: 70 #指定宠物显示的宽度 height: 120 #指定宠物显示的高度 mobile: show: true #是否在手机上显示 ９．鼠标点击出现桃心效果并且将代码复制进去，然后保存 在/themes/next/source/js/src里面 新建click-love.js文件: 粘贴如下代码: 12&lt;!-- 页面点击小桃心--&gt;&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt; 然后打开\themes\next\layout\_layout.swig文件,在末尾添加以下代码： 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); １０．网页底部的动态桃心图像修改主题配置文件: 1234icon: name: heart #如果name的值为heart表示引用fontawesome网站上的心形图标 animated: true #如果想用动态图标应该将animated的值设为true color: "#ff0000" #图标的色--用16进制数 １１．添加顶部加载条在根目录打开git bash执行以下指令: 1git clone https://github.com/theme-next/theme-next-pace source /lib/pace 修改主题配置文件: 12pace: true #启用顶部加载条pace_theme: pace-theme-flash #指定顶部加载条样式 １２．设置网站的图标Favicon１２．１ 下载一个32*32的图片，并改名为favicon.ico, 然后放到/blog/themes/next/source/images目录 １２．２ 修改主题配置文件 12345favicon: small: /images/favicon-16x16-next.png medium: /images/favicon.ico apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg １３． DaoVoice 在线联系１３．１ 注册地址: ,获取app_id １３．２ /blog/themes/next/layout/_partials/head/head.swig 添加下面的代码: 123456789101112131415&#123;% if theme.custom_file_path.head %&#125; &#123;% set custom_head = '../../../../../' + theme.custom_file_path.head %&#125;&#123;% else %&#125; &#123;% set custom_head = '../../_custom/head.swig' %&#125;&#123;% endif %&#125;&#123;% include custom_head %&#125;&#123;% if theme.daovoice %&#125; &lt;script&gt;(function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0eeeae6f.js","daovoice") daovoice('init', &#123; app_id: "06289ecd"&#125;);daovoice('update'); &lt;/script&gt;&#123;% endif %&#125; １３．３ 修改主题的配置文件 12daovoice: truedaovoice_app_id: 我们注册获取的id １４．添加AddThis分享１４．１ 在网站 AddThis 上注册账号。 可以使用 Google/Facebook/Twitter 账号进行第三方登陆 １４．２ 设置分享按钮的样式:(显示位置, 显示样式为扩展式,悬浮式等) １４．３ 修改主题配置文件 你Addthis账号ID ```123456789## １５．添加打赏:```javascript reward: enable: true ＃开启 comment: 坚持原创技术分享，您的支持将鼓励我继续创作！ ＃图片上方显示的文本 wechatpay: ＃图片地址 alipay: ＃图片地址 １６．文章加密访问１６．１ 在 /blog/themes/next/layout/_partials/head/head.swig 文件中添加： 12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; １６．２ 在需要加密的文章的页面顶部(Front matter区域)加入 “password : 设置密码值” １７．在文章底部增加版权信息１７．１ 在/blog/themes/next/layout/_macro/ 下添加 my-copyright.swig文件： 123456789101112131415161718192021222324252627282930&#123;% if page.copyright %&#125;&lt;div class="my_post_copyright"&gt; &lt;script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script src="https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"&gt;&lt;/script&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;"&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href="/" title="访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class="copy-path" title="点击复制文章链接"&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;" aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;版权声明:&lt;/span&gt;本博客所有文章除特别声明外，均采用 &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt;BY-NC-SA &lt;/a&gt;许可协议。转载请注明出处!&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard('.fa-clipboard'); $(".fa-clipboard").click(function()&#123; clipboard.on('success', function()&#123; swal(&#123; title: "", text: '复制成功', icon: "success", showConfirmButton: true &#125;); &#125;); &#125;); &lt;/script&gt;&#123;% endif %&#125; １７．２ 在目录/blog/themes/next/source/css/_common/components/post/下添加my-post-copyright.styl： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #b5b5b5; font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #a3d2a3; text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; １７．３ 修改/blog/themes/next/layout/_macro/post.swig，在下面位置添加: 代码如下: 12345 &lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'my-copyright.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; １７．４ 修改/blog/themes/next/source/css/_common/components/post/post.styl文件，在最后一行增加代码： @import &quot;my-post-copyright 保存重新生成即可。１７．５ 如果要在文章下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似： 1234567---title: hexo个性化配置date: 2017-05-22 22:53:53tags: hexo美化categories: Hexocopyright: true--- 如果你觉得每次都要输入copyright: true很麻烦的话,那么在/scaffolds/post.md文件中添加： １８．修改文章底部的那个带#号的标签修改模板 /themes/next/layout/_macro/post.swig，搜索 rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; １９．在每篇文章末尾添加“本文结束”标记１９．１ 在路径 /blog/themes/next/layout/_macro 中新建 passage-end-tag.swig 文件,并添加以下内容 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; １９．２ 接着打开/blog/themes/next/layout/_macro/post.swig文件，在post-body 之后， post-footer之前添加,即在如下位置添加 代码如下： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; １９．３ 然后打开主题配置文件（_config.yml),在末尾添加： 123#文章末尾添加“本文结束”标记passage_end_tag: enabled: true ２０．修改侧边栏作者头像并旋转：２０．１ 打开\themes\next\source\css\_common\components\sidebar\sidebar-author.styl，在里面添加如下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; ２１．隐藏网页底部powered By Hexo / 强力驱动打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。位置如图： ２2．在右上角或者左上角实现fork me on github点击这里 或者 这里挑选自己喜欢的样式，并复制代码。 /blog/themes/next/layout/_layout.swig文件中进行配置. next表示的是当前你使用的主题的样式. 注意的是: href 后面是自己的github的地址,记得修改哦! ２３．修改代码块自定义样式修改主题配置文件 highlight_theme: night bright #可选值: normal | night | night eighties | night blue | night bright ２４．开启代码块复制123codeblock: enable: true show_result: true ２５．侧边栏社交链接修改主题配置文件: 链接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址 123456789101112131415161718#设置侧边栏社交链social: GitHub: https://github.com/zzwwqq || github E-Mail: mailto:zwq13264860490@gmail.com || envelope Weibo: https://weibo.com/u/5564810309/home?wvr=5 || weibo 知乎: https://www.zhihu.com/people/shen-qiu-wu-hen-66/activities || snapchat#这里键的值必须和上面social中的 "||" 后面指定的名称一致，在fontawesome官网找喜欢的小图标，将名字复制在如下位置，如E-Mail:对应的图标名称为envelope。social_icons: enable: true # `enable` 选项用于控制是否显示图标 icons_only: false transition: false #图标 GitHub: github E-Mail: envelope Weibo: weibo 知乎: snapchat ２６．图片处理(使用七牛云为Hexo存储图片等静态资源) ２６．１ 七牛是什么? 七牛 是一个云存储服务商，注册并实名认证之后1后，你将免费享有 10GB 存储空间，每月 10GB 下载流量、100 万次 GET 请求、 10 万次 PUT/DELETE 请求。七牛的定位不是像百度云一样的 网盘 ，也不是同坚果云一般的 同步云 ，而是 CDN 2 ，让你在浏览网页的时候最快的接收到页面中的图片、音频等文件，所以非常适合个人、企业用户用来储存站点资源。对于个人博主来说，你可以把博客中的图片、音频、视频等媒体上传到七牛，在博客中引用；也可以将站点需要加载的CSS、JS等文件上传到七牛，以加速网站。 ２６．２ 与其他上传站点相比： 更稳定：七牛毕竟是老牌服务商，数据的安全性和稳定性都较有保证。如果上传到什么小网站，哪天发现图片都打不开了才是人间惨剧~ 更灵活：配合 hexo-qiniu-sync 插件4，就算是七牛以后更改了空间域名，也不用一篇一篇地去改外链地址，只要在配置文件中修改外链前缀即可。 更方便：配合 hexo-qiniu-sync 插件，不必”上传→复制链接→引用外链“，直接按照本地路径引用，然后键入一条命令同步到七牛就好。会自动识别哪些是新增、修改的文件需要上传，哪些是原有的文件不需改动，十分方便。 ２６．３ 七牛并非尽善尽美： 在线文件管理不支持目录 本地删除文件，云端不能同步删除文件 ２６．４ 开始安装： １．点击 这里 申请七牛账户 ２．创建存储空间（七牛叫作”Bucket“），注意添加的空间为”对象存储“，访问控制选择”公开空间“： ３．点击页面右上角头像→进入”密钥管理“→复制当前使用中的AK和SK，待会设置插件时会用到。 ４．安装插件：在hexo主目录下运行以下命令： npm install hexo-qiniu-sync --save ５．站点配置文件中添加下面内容: 1234567891011121314151617181920qiniu: offline: false #是否离线. 离线状态将使用本地地址渲染 sync: true #是否同步 bucket: blog #这里替换为你存储空间的名称 #secret_file: sec/qn.json or C: access_key: 2rRw0dG-jQYCoqs9rvsltVQqzSBVpwS #上传密钥AccessKey,替换为你自己的 secret_key: OCBcCU3tqKiBdOza9PlLoR6AcA-fV_u #上传密钥SecretKey,替换为你自己的 dirPrefix: static #上传的资源子目录前缀.如设置为static，那么urlPrefix后面也要加static urlPrefix: http://cdn.zzwwqq.xyz/static/ #这里替换为你自己的外链域名,如何获取,查看下面图示 up_host: http://upload.qiniu.com #这里不用改 local_dir: static #本地资源储存目录。在本例中，待上传的资源都储存在hexo主目录中的static 文件夹（也就是与 source 目录平级）中。 update_exist: true #是否更新已经上传过的文件 #运行程序后,会自动在本地根目录生成static目录,static目录下生成三个文件夹,js,css,images image: folder: images extend: js: folder: js css: folder: css ６．如何引用七牛上的图片? 引用地址：urlPrefix＋dirPrefix＋images+ 相对于/blog/static/images/ 的文件路径 例如: http://cdn.zzwwqq.xyz/static/images/hexo/hexo-1.jpg ２７．修改背景图,以及侧边栏顶部颜色，主／副标题颜色效果图： 123456789101112131415161718192021//添加背景图片body &#123; background:url(http://cdn.zzwwqq.xyz/%E6%98%9F%E7%A9%BA.jpg)&#125;//改掉题头颜色.site-meta &#123;background:url(http://cdn.zzwwqq.xyz/static/images/hexo/hexo-0-site-meta.jpg) &#125;//主标题颜色.brand&#123; color: #4dfc23 &#125;//副标题颜色.site-subtitle&#123; color: #4dfc23&#125;.footer&#123; font-size: 14px; color: #ededed;&#125; ２８．侧边栏添加网易云音乐效果图: 打开网易云音乐官网，进入想插入的音乐的界面 点击“生成外链播放器” 复制代码 ##２９．底部添加公网安备 12345 &lt;div class="BbeiAn-info" style="color:#4dfc23"&gt; &#123;&#123; __('鄂ICP备') &#125;&#125; - &lt;a target="_blank" href="http://www.miitbeian.gov.cn/" style="color:#4dfc23;" rel="nofollow"&gt;18025394&lt;/a&gt; &lt;!--a标签中增加nofollow属性，避免爬虫出站。--&gt;| &lt;a target="_blank" href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=42090202000295" style="text-decoration:none;color:#4dfc23;padding-left:30px;background:url(https://s1.ax1x.com/2018/09/29/ilmwIH.png) no-repeat left center" rel="nofollow"&gt;&#123;&#123; __('鄂公网安备 42090202000295') &#125;&#125;&lt;/a&gt; &lt;!--这里将图标作为了背景，以使得能和后面的文字在同一行--&gt;&lt;/div&gt; ３０．取消“文章目录”的自动编号 修改如下 修改后: ３１．封面模式需要安装一个小插件是：hexo-less，安装指令: $ npm install --save hexo-less 该插件解决了什么问题呢？ 手动设置文章概要，但不影响章内䆟。只需在文章中写 &lt;!-- less --&gt; 作为分割线， &lt;!-- less --&gt; 上面的内容会作为摘要，但不作为文章内容的一部分。 举例，我想让这篇文章在主页列表中，只显示一张美图。 效果图： 文章中代码如下: 二、说明:修改hexo的站点配置文件,需要重启服务器(即执行 $ hexo s命令),才能生效. 修改其他文件如主题配置文件,不必重启服务器(即执行 $ hexo s命令), 直接刷新页面即可生效. 参考链接: http://theme-next.iissnan.com/getting-started.html https://www.jianshu.com/p/f054333ac9e6 https://www.jianshu.com/p/d0fe52c73950 https://xian6ge.cn/posts/40ba2cba/ https://me.idealli.com/post/e8d13fc.html http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/ https://www.jianshu.com/p/805bd0b65d98]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo发布文章]]></title>
    <url>%2F%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0.html</url>
    <content type="text"><![CDATA[前言: 经过前面两节的操作，hexo的整个框架以及和github关联已经配置好了,现在我们要考虑的就是 如何用指令去创建一篇文章,然后发布? .我们先来看一下hexo的目录结构,了解每个目录的作用,这将让我们对hexo的运行原理有一个大概的认识,对于我们后面美化主题是有帮助的, 然后再来创建文章,并发布到本地服务器,最后查看效果. 一、Hexo的目录分析: １．.deploy_git: 这个目录是执行 hexo d 命令 后生成的,主要存放部署的信息. ２．node_modules: 这个目录存放的是一些插件包 ３．public : 这个目录是执行 hexo g后生成的, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下 ４．scaffolds: 用来存放模板文件。模板文件的正文部分一般为空，一般在模板文件顶部有一个区域 ( 以 --- 分隔的区域) 称作Front-matter,在这里配置的变量主要有title(即文章标题), date(即文章创建日期),comment(是否开启评论), tags(文章标签), categories(文章所属分类)等. 当你新建文章时，Hexo 会根据 scaffold 来建立文件，也就是说会在你创建的每个文件顶部自动加上模板文件中配置的这些内容. ５．source: 存放你的文章(.md后缀的文件) ６．static: 这个目录是我自己创建的，专门用来存放图片的 ７．themes: 这个目录是存放主题的(默认主题是landscape, 目前使用最多的是next主题) ８．.gitignore: 这个文件和git有关, 在这个文件里面可以配置哪些文件不被提交(例如: 配置 *.log ,那么在hexo d命令的时候, 任何以.log为后缀的文件将不会被提交到github) ９．_admin-config.yml: 这个文件是安装了hexo 后台管理插件后生成的,这里暂时不作介绍,后面再说 １０．_config.yml: 这个文件是hexo的核心配置文件(也称站点配置文件) １１．_config.yml.back.yml: 这个文件是我自己创建的,是站点配置文件的备份. 以防哪一天老眼昏花把内容改错了,到时可以恢复. １２．package.json: 应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 １３．db.json： １４．package-lock.json: 二、使用Hexo指令创建一篇文章:​ $ hexo new [layout] &lt;title&gt; 这里有必要对指令作一些说明: 就[layout]即＂布局＂ 而言:Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。 布局: 路径: 说明: post source/_posts 如果你输入的指令中[layout]参数空着,那么默认是post;例如:hexo new 我的第一篇文章;等价于:hexo new post 我的第一篇文章; 产生的作用就是: 在source/_posts路径下生成 “我的第一篇文章.md” 文件,这个就是你要写文章的那个文件. page source draft source/_drafts 你可以通过 publish 命令将草稿移动到 source/_posts 文件夹,如:$ hexo publish [layout] &lt;title&gt;,草稿默认是不会显示在页面中的，可在执行时加上 --draft 参数，或是把 render_drafts 参数设为 true来预览草稿。 就&lt;title&gt;而言:默认是指定文章的标题和.md文件名称, 你可以任意指定一个名称来取代指令中的&lt;title&gt;参数. 注: 如果你不想你的文章被处理，你可以将 Front-Matter 中的layout: 设为 false 。 三、举例: 需求: 我要创建一篇文章,文件名为 “使用hexo发布文章” 文章标题为”使用hexo发布文章” 并且自动在文件顶部(Front-Matter区域),添加文章分类,标签 的键, 键对应的值由我们自己添加.最后发布到本地服务器查看效果. 首先修改模板文件: 打开git bash 执行指令: 查看生成文件所在目录以及文件名: 查看生成的文章, 文章标题,分类,标签等是否自动添加了: 给文章添加分类,和标签: 发布文章到本地服务器: $ hexo clean $ hexo g $ hexo s 查看效果: 四、说明: 通过上面的操作后，你可能会感到奇怪，为什么自己的界面和图示的不一样呢？这里我得解释下，在第一节安装hexo时,hexo默认给我们安装了ｌａｎｄｓｃａｐｅ主题. 这个主题可以在 “/blog/themes” 路径下找到. 而我安装的是next主题,并做了些个性化配置. 所以和你的界面不同. 如果你和我一样对默认主题不满意,喜爱折腾,追求完美,那么请关注下一节内容.]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>使用hexo发布文章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo部署到GitHub]]></title>
    <url>%2Fhexo%E9%83%A8%E7%BD%B2%E5%88%B0GitHub.html</url>
    <content type="text"><![CDATA[前言: 上一节我们已经将hexo部署到本地了，但是只有在你自己主机上才能查看博客，如果你想让任何人随时随地都能访问到你的博客，那么你可以考虑将hexo部署到github(属于国外,所以访问速度要慢一些)或者codying(国内),如果你是一个程序员,那么推荐你选择github, 你要是不知道GitHub， 那就太说不过去了， 我可能遇到了一个假的程序员！ 步骤: １．注册一个github账号: 注册 ２．回到你的本地机,打开git bash,设置用户名和邮箱:(目的是:上传文件的时候告诉github,是谁向远程仓库上传数据) $ git config --global user.name &quot;Your Name&quot; $ git config --global user.email &quot;email@example.com&quot; 注: 这里”Your Name” 替换为你的GitHub的用户名,”email@example.com“替换为你的GitHub的邮箱 输入完后,通过以下命令检查你的设置是否正确: (如果你比较懒,那就忽略吧!) $ git config user.name $ git config user.email ３．生成ＳＳＨ密钥并添加到github： $ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 此时它会告诉你已经生成了.ssh的文件夹, 在你的电脑中找到它,复制id_rsa.pub 文件中的内容. 此时回到GitHub页面 ​ 然后回到gitbash中，输入指令查看是否添加成功: $ ssh -T git@github.com ；如果你看到以下内容，恭喜你配置成功了． ４．创建github仓库: ​ ​ 选择一个主题: (临时测试用,等会会覆盖的) 浏览器地址栏输入用户名.github.io：如果出现下面的界面说明你的域名已经生效 ５．将Hexo部署到github: 经过上面的操作后,此时我们就可以将hexo和GitHub关联起来了,也就是将hexo生成的文章部署到github 打开站点配置文件(/blog/_config.yml), 翻到最后,找到deploy: 修改为:​ 123deploy: type: git repo: github: git@github.com:zzwwqq/zzwwqq.github.io.git,master 说明: master 表示 部署到远程仓库的master分支上 git@github.com:zzwwqq/zzwwqq.github.io.git 改为你的仓库地址, 你可以去github网页上拷贝 安装deploy-git, 也就是部署的命令,这样你才能用命令部署到GitHub. $ npm install hexo-deployer-git --save 然后执行下述命令: hexo clean hexo g hexo d 执行了hexo d后 ,如果最后一行显示如下内容,说明部署成功, 现在你可以去浏览器地址栏输入 你的域名进行访问了.]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo部署到GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用指令]]></title>
    <url>%2FLinux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html</url>
    <content type="text"><![CDATA[１．帮助：(查看指令的详细信息)1.1 xxx --help (xxx -h) 1.2 man xxx ２．查看哪个程序占用了特定端口？占用某个端口的进程是谁?2.1 lsof -i -n -P | grep :80 //查看哪个程序占用了特定端口 2.2 lsof -i//显示所有打开的端口 2.3 lsof -i:80 //显示所有打开80端口的进程 2.4 lsof -n //不将IP转换为hostname，缺省是不加上-n参数 -P //port numbers to port names; ３．查看磁盘使用情况： 查看磁盘中指定目录的使用情况：du -ach --max-depth=1 指定目录的路径 查看系统磁盘占用情况：df -lh ４．进程相关操作： 查看系统执行的进程（不包括父进程）：ps -aux | more (ps -aux | grep xxxx) 查看当前所有进程，包括父进程：ps -ef | more (ps -ef | grep xxxx) 查看系统负载：w 动态查看负载: top 在 top 状态下: 按shift + m，可以按照内存使用大小排序。 按数字 1 可以列出各颗 cpu 的使用状态。 静态查看系统负载：top -bn1 和 top 命令唯一的区别就是，它一次性全部把所有信息输出出来而非动态显示。 查看系统当前剩余多少内存： free -h (-h及human，以方便人阅读方式显示) 杀死进程：kill 进程号 强制杀死进程：kill -9 进程号 按照进程名强制杀死该进程名的所有进程：pkill -9 进程名 按照进程名杀死进程：killall 进程名 ５．查看系统信息： 查看内核版本号：uname -r 查看系统内核版本，gcc编译器版本详细信息： cat /proc/version 查看系统信息：cat /etc/redhat-release 查看操作系统版本所有信息: lsb_release -a 查看内存信息 cat /proc/meminfo 查看网卡信息 dmesg | grep -i eth 查看机器型号 dmidecode | grep &quot;Product Name&quot; 查看硬盘信息命令 : fdisk -l 查看主板信息 dmidecode |grep -A16 &quot;System Information$&quot; 查看CPU信息（型号) cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 查看CPU的主频 cat /proc/cpuinfo |grep MHz|uniq 查看当前CPU运行在32bit还是64bit模式下 getconf LONG_BIT 查看是否支持64bit cat /proc/cpuinfo | grep flags | grep &#39;lm&#39; | wc -l (如果结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit) 查看CPU是几核: cat /proc/cpuinfo |grep &quot;cores&quot;|uniq 逻辑CPU个数：cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l 物理CPU个数： cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq | wc -l 每个物理CPU中Core的个数： cat /proc/cpuinfo | grep &quot;cpu cores&quot; | wc -l ６．查看网络： 查看当前主机的ip地址和网卡信息: ifconfig （附加网卡的启用ifup eth0与停用stop eth0命令） 查看IP地址信息：ip addr (注：安装minimal版的CentOS系统时，ifconfig等网络相关的指令用不了，暂时可以用ip addr) 测试网络的连通性 : ping (网络统计)命令显示连接信息,路由表信息等: netstat 通常配合使用参数，这里只演示一个参数。netstat -? 打印网络连接状况：netstat -anp （-p表示显示进程名和进程ID） 当前系统启动哪些端口：netstat -lnp （-l表示显示正在监听的端口)netstat指令无效时：使用yum install net-tools安装 路由跟踪命令: traceroute 可以查看到你从源到目的的所经过的路由 查询DNS相关信息记录,CNAME,MX记录等等: dig 这个命令主要用于解决相关DNS查询； ​ nslookup 也具备查询DNS的功能，还可以显示一个ip地址的记录！ 查找到IP的名称或IP的名字在IPv4和IPv6 DNS记录和查询: host IP地址 例如host www.baidu.com 查看主机名: hostname 或者你可以到/etc/sysconfig/network中修改主机名。 查看路由表信息: route 增加和删除路由条目: root add -net 192.168.199.129/24 gw 192.168.199.1 查看默认的表使用: arp 为地址解析协议 查看网络模式和网络速度等信息: ethtool 有关配置可以到/etc/sysconfig/network-scripts/ifcfg-eth0下进行修改。 ７．任务调度： 编辑定时任务：crontab -e 删除：crontab -r 查询：crontab -l 重启：service crond restart ８．压缩/解压缩： 解压到当前目录：tar -zxvf xxx.tar.gz 解压到指定目录：tar -zxvf xxx.tar.gz -C 目标目录 压缩：tar -zcvf 打包后的文件名（以.tar.gz为后缀） 要压缩的文件名 tar里面没有针对xz格式的参数比如 -z是针对 gzip，-j是针对 bzip2） 解压tar.xz文件： 先 xz -d xxx.tar.xz 将 xxx.tar.xz解压成 xxx.tar 然后，再用 tar xvf xxx.tar来解包。 创建tar.xz文件： 先 tar cvf xxx.tar xxx/ 这样创建xxx.tar文件， 然后使用 xz -z xxx.tar 来将 xxx.tar压缩成为 xxx.tar.xz ９．rpm：安装/查询/删除rpm包： 安装本地的rpm包：rpm -ivh rpm包全路径名 查询是否安装了某个rpm包：rpm -qa | grep 软件名 删除rpm方法安装的某个rpm包： rpm -e 软件包名 升级某个rpm包：rpm -Uvh 软件包名 １０．yum：安装/查询/删除rpm包： 查询公网的yum服务器中是否有我们要安装的某个软件源：yum list | grep 软件名 (或者用yum search 软件名) 安装最新版的某个软件（默认）：yum -y install 软件名 安装指定版本的某个软件：yum -y install 软件名-版本号 升级某个rpm包： yum update -y 软件名 （查看是否有新版本及版本号 yum update |grep 软件名） 删除yum方式安装的rpm包：yum remove 软件名 当要使用一个指令，系统提示不存在，于是用yum安装它但又不知道它属于哪个rpm包时：yum provides 指令名（以ifconfig为例：yum provides ifconfig） 查看包的关系：repoquery --nvr --whatprovides 包名 （ repoquery是yum扩展工具包yum-utils中的一个工具，所有如果你没有repoquery命令的话，可以先 sudo yum install yum-utils 安装yum-utils包） １１．防火墙： CentOS7查看防火墙状态：systemctl status firewalld (CentOS6查看防火墙状态:service iptables status) 临时关闭防火墙：systemctl stop firewalld 启动防火墙：systemctl start firewalld １２．关机/重启/注销linux： 关机：halt （或者shutdown -h 1 表示一分钟后关机；shutdown -h now立刻关机） 重启：reboot 注销：logout １３．文件/目录操作： 创建目录（父目录不存在时创建父目录，即级联创建目录）：mkdir -pv 目录名（目录名如./aaa/bbb/ccc/ddd） 创建文件：touch 文件名 递归且强制删除目录/文件：rm -rf 目录名 显示目录下的文件/目录：ls -a (-a 表示列出所有文件，包括隐藏文件) ls -d (-d表示针对目录的，只列出目录本身) 浏览小文件并显示行号：cat -n 文件名 （浏览大文件：cat -n 文件名 | more） 浏览大文件 并显示行号，百分比：less -mN 文件名 追加：向文件的内容后面追加内容：echo &quot;内容&quot; &gt;&gt; 文件名 覆盖：用文件1的内容覆盖文件2里面的内容 ： cat 文件1 &gt; 文件2 控制台打印内容：echo “xxxx” 查看文件后5行：tail -n 5 文件名 （查看前5行：head -n 文件名） 创建快捷方式（软链接）：ln -s 原文件 快捷方式名称 文件重命名 ： mv 原文件名/目录名 新文件名/目录名 剪切（移动）：mv 原文件名/目录 新的路径 复制：cp -r 原文件/目录 目标文件/目录 （注意：复制目录必须加-r，表递归复制） １４．搜索文件/目录： 按照名称查询某个目录下是否有某个文件：find 搜索的目录 -name 要搜索的文件名 查询某个目录下属于某个用户的所有文件： find 搜索的目录 -user 用户名 １５．用户操作： 切换为某个用户：su -用户名 切换为管理员用户即root用户：su - 以管理员权限执行一条命令 ：sudo 要执行的命令 创建用户/组：useradd/groupadd useradd -g 所属的组名 用户名（注意：指定用户所属的组（前提：组存在）） 改变文件所属用户/组：chown/chgrp 改变用户所属组：usermod 改权限：chmod 改运行级别：chkconfig --level 0到6的数字 服务名 on （on 表开启，off表关闭） 查看用户所属组：id 用户名 查看有哪些用户：cat /etc/passwd 查看有哪些组：cat /etc/group 设置密码 passwd 用户名 １６．查看以前敲过的所有命令：history （常与管道连用，history | more）]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux常用指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux的安装]]></title>
    <url>%2FLinux%E7%9A%84%E5%AE%89%E8%A3%85.html</url>
    <content type="text"><![CDATA[前言: 上一节我们了解了Linux的一些基本概念,这一节我们将开始安装Linux系统,Linux需要一个环境，我们需要创建一个虚拟机，然后在虚拟机上安装一个Centos系统来学习. 什么是虚拟机? 安装虚拟机软件VMware:Vmware 下载地址 VMWare10 创建虚拟机空间:安装好 vmware 后，就可以创建虚拟机空间了: 点击新建虚拟机 安装CentOS系统:安装系统之前，需要先去下载一个镜像文件: CentOS下载地址： ​ 网易镜像：网易镜像​ 搜狐镜像：搜狐镜像 ​ 阿里云CentOS7镜像: 可以选择第一个：CentOS-7-x86_64-DVD-1708.iso 进行下载即可。 这里找到Ｌｉｎｕｘ系统的iso镜像(即.iso后缀)文件 这里如果选择OK,此时会联网检查系统的完整性,会等待很久,所以这里选择skip.]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux的安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Linux]]></title>
    <url>%2F%E5%88%9D%E8%AF%86Linux.html</url>
    <content type="text"><![CDATA[前言: 根据JoblabXTM整理，使用Linux操作系统占据了整个操作系统的绝大数量，已经接近99%！立志于互联网行业的工程师们掌握Linux这门技术对自身的职业发展，一定会起到事半功倍之效果,所有我们有必要学习Linux操作系统. 一、Linux是什么,怎么读? linux是一个开源、免费的类Unix操作系统，其稳定性、安全性、处理多并发已经得到业界的认可，目前很多企业级的项目都会部署到Linux/unix系统上。 Linux 读作[里纽克斯, 利尼克斯,里纳克斯] 二、Linux 的历史背景: 最初是由芬兰赫尔辛基大学学生Linus Torvalds (林纳斯-托瓦斯)由于自己不满意教学中使用的MINIX操作系统,所有在1990年底由于个人爱好设计出了LINUX系统核心,后来发布于芬兰最大的ftp服务器上,用户可以免费下载,所有它的周边的程序越来越多,Linux本身也逐渐壮大起来,之后Linux在不到三年的时间里成为了一个功能完善,稳定可靠的操作系统. 三、Linux的版本和分类:3.1 Linux 版本分两种: 内核版本 和发行版本: 内核版本是指在Linus领导下的内核小组开发维护的系统内核的版本号. 发行版本是一些组织和公司根据自己发行版的不同而自定. 3.2 一般来说著名的linux系统基本上分两大类： RedHat系列：Redhat、Centos、Fedora等 Debian系列：Debian、Ubuntu(乌班图)等 RedHat(红帽)系列 常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” 包管理工具 yum 支持tar包 Debian(蝶变)系列 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” 包管理工具 apt-get 支持tar包 四、Unix简介: Unix是一个强大的多用户、多任务操作系统.于1969年在AT&amp;T(美国电话电报公司)的贝尔实验室开发. UNIX的商标权由国际开放标准组织所拥有. UNIX操作系统是商业版,需要收费,价格比Windows正版要贵一些. 五、Linux和Unix的关系: 六、Linux和Windows的比较: 比较 Window Linux 免费与收费 收费且很贵 Linux 免费或少许费用 软件与支持 数量和质量的优势，不过大部分为收费软件；由微软官方提供支持和服务； 开源自由软件，用户可以修改定制和再发布，由于基本免费没有资金支持，部分软件质量和体验欠缺；有全球所有的Linux开发者和自由软件社区提供支持。 安全性 三天两头打补丁安装系统安全更新，还是会中病毒木马； 要说 Linux 没有安全问题，那当然是不可能的，这一点仁者见仁智者见智，相对来说肯定比Windows 平台要更加安全 使用习惯 普通用户基本都是纯图形界面下操作使用，依靠鼠标和键盘完成一切操作，用户上手容易入门简单； 兼具图形界面操作和完全的命令行操作，可以只用键盘完成一切操作，新手入门较困难，需要一些学习和指导，一旦熟练之后效率极高。 可定制性 封闭的，系统可定制性很差； 开源，可定制化非常强。 应用场景 桌面操作系统主要使用的是window。 支撑百度，谷歌，淘宝等应用软件和服务的，是后台成千上万的Linux服务器主机。世界上大部分软件和服务都是运行在Linux之上的。 七、Linux 在计算机中的位置: 八、Linux的目录结构: 目录 说明 / 根目录: 一般根目录下只存放目录,不存放文件 /bin (binaries) 存放二进制可执行文件，常用命令一般都在这里(如: ls,cat,mkdir等)。 /boot 存放用于系统启动时使用的各种文件 /dev (devices) 类似Windows的设备管理器, 把所有的硬件用文件的形式存储。 /etc (etcetera) 存放系统管理和配置文件 /home 存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示 /lib 存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。 /proc 虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。 /usr 用于存放系统应用程序，比较重要的目录 /usr/local [重点] : 一般通过编译源码方式安装的程序就存放在这里 /usr/sbin 超级用户的一些管理程序 /usr/share/man 帮助文档 /usr/bin 众多的应用程序 /var [重点] 用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等。 /tmp 用于存放各种临时文件，是公用的临时文件存储点。 /mnt 系统提供这个目录是让用户临时挂载其他的文件系统。 /opt 下载的未安装的软件一般放到这里 /media linux会自动识别一些设备,例如U盘,光驱等,当识别后会把识别的设备挂载到这个目录下 /lost+found 这个目录平时是空的，系统非正常关机会留下一些文件（windows下叫什么.chk）就存放在这里 ​]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>初识Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始搭建Hexo基本框架]]></title>
    <url>%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhexo%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6.html</url>
    <content type="text"><![CDATA[前言: 之前自己敲代码纯手工打造了一个博客,并成功部署到了阿里云服务器上,虽然界面不忍直视吧,但还是有一丝小小的成就感.最近看到朋友用Hexo框架搭建的一个博客,界面看起来很美观,于是乎爱折腾的我心动了,决定放手干,好了废话不多说,进入正题,先说一下我的思路:个人认为无论学习什么技术,首先要做的就是要了解这个技术是什么?然后为什么要用它,它有什么优势,特点?最后就是我该怎么用? 一、Hexo是什么? Hexo 是一款基于Node.js的静态博客生成程序，作者是中国台湾tommy351。通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容． 二、Hexo有什么用,优势在哪? 如果你一直想拥有一个界面美观的,能在上面记录一些学习心得,个人日记,一些内容公开发布,一些内容私密访问,属于自己的博客平台,但是又愁于自己没有一定的编程能力难以实现这个想法,那么Hexo将会给你带来福音, 即使你没有一定的编程基础,你也可以快速使用Hexo打造一个你自己喜欢的博客,因为不需要你敲大量的代码,你要做的仅仅是不断的Ctrl+C,Ctrl+V改一改配置文件. 简单吧! 是不是有点心动了,心动就行动吧! ​ 三、如何安装?以Windows机为例:１．首先要安装的就是Git和Node.js这两个工具：（如果之前安装过,那么跳过这一步） Git下载地址: Git Node.js下载地址: Node.js ２．安装hexo: 打开git软件,通过node.js工具的npm命令来安装hexo: $ npm install -g hexo-cli ３．检测上述工具是否安装成功,如果成功会显示版本号：(如果你嫌麻烦可以忽略) node-v npm -v git --version hexo -v ４．在任意位置创建一个文件夹,例如:blog, 并进入该目录: 我这里是创建在E盘 $ cd /e/blog ５．运行下面的命令,hexo 将会在blog文件夹中生成所需要的文件 $ hexo init 会生成以下目录内容: ​ 注意: 将来自定义博客样式的时候别把站点配置文件和主题配置文件弄混淆了. ５．生成静态文件(hexo会将/blog/source/ 下面的.md后缀的文件编译为.html后缀的文件,存放在/blog/public/路径下): $ hexo g ６．启动服务器: $ hexo s 默认情况下，访问网址为： http://localhost:4000/ 在浏览器地址栏输入上面的地址: 如果看到下面这个界面，那么恭喜你安装成功了，这个就是hexo默认的博客主题,如果你不喜欢还有更酷炫的主题，如何操作，下节我们继续．现在你已经可以在这个主题下写博客了。 四、说明: $ hexo g 是 $ hexo generate 的简写形式,产生的作用是一样的 $ hexo s是 $ hexo server的简写, 表示启动本地服务器,让hexo在本地运行 $ hexo d 是 $ hexo deployed的简写, (这个指令是部署到远程服务器的,后面会讲到) $ hexo clean 没有简写,别写成了$ hexo c $ hexo server -p 5000 #更改端口 参考文档： Hexo]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo的安装</tag>
      </tags>
  </entry>
</search>
