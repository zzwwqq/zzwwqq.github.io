<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zwq</title>
  
  <subtitle>路漫漫其修远兮,吾将上下而求索!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zzwwqq.xyz/"/>
  <updated>2019-03-27T13:30:14.864Z</updated>
  <id>https://zzwwqq.xyz/</id>
  
  <author>
    <name>zwq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java虚拟机</title>
    <link href="https://zzwwqq.xyz/java%E8%99%9A%E6%8B%9F%E6%9C%BA.html"/>
    <id>https://zzwwqq.xyz/java虚拟机.html</id>
    <published>2019-03-27T09:27:04.000Z</published>
    <updated>2019-03-27T13:30:14.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JVM是什么"><a href="#一、JVM是什么" class="headerlink" title="一、JVM是什么?"></a>一、JVM是什么?</h2><p>JVM是Java Virtual Machine（Java虚拟机的缩写)，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><h2 id="二、JVM的作用"><a href="#二、JVM的作用" class="headerlink" title="二、JVM的作用?"></a>二、JVM的作用?</h2><p>JVM有自己完善的硬件架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码字节码，就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。</p><h2 id="三、从进程的角度解释JVM"><a href="#三、从进程的角度解释JVM" class="headerlink" title="三、从进程的角度解释JVM"></a>三、从进程的角度解释JVM</h2><p>我们知道，虚拟机是运行在操作系统之中的，那么什么东西才能在操作系统中运行呢？当然是进程，因为进程是操作系统中的执行单位。可以这样理解，当它在运行的时候，它就是一个操作系统中的进程实例，当它没有在运行时（作为可执行文件存放于文件系统中），可以把它叫做程序。</p><p>对命令行比较熟悉的同学，都知道其实一个命令对应一个可执行的二进制文件，当敲下这个命令并且回车后，就会创建一个进程，加载对应的可执行文件到进程的地址空间中，并且执行其中的指令。</p><h2 id="四、Java版HelloWord程序的编译和执行形式"><a href="#四、Java版HelloWord程序的编译和执行形式" class="headerlink" title="四、Java版HelloWord程序的编译和执行形式:"></a>四、Java版HelloWord程序的编译和执行形式:</h2><p>①: 首先编写源文件HelloWord.java ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②: 编译Java版的HelloWorld程序：<code>$ javac HelloWorld.java</code></p><p>③: 运行Java版的HelloWorld程序：<code>$ java -classpath . HelloWorld</code></p><p>4.1 从上面的过程可以看到， 我们在运行Java版的HelloWorld程序的时候， 敲入的命令并不是 ./HelloWorld.class 。 因为class文件并不是可以直接被操作系统识别的二进制可执行文件 。 我们敲入的是java这个命令。 这个命令说明， 我们首先启动的是一个叫做java的程序， 这个java程序在运行起来之后就是一个JVM进程实例.</p><p>4.2 上面的命令执行流程是这样的：</p><p>java命令首先启动虚拟机进程，虚拟机进程成功启动后，读取参数“HelloWorld”，把他作为初始类加载到内存，对这个类进行初始化和动态链接，然后从这个类的main方法开始执行。</p><p>也就是说我们的.class文件不是直接被系统加载后直接在cpu上执行的，而是被一个叫做虚拟机的进程托管的。首先必须虚拟机进程启动就绪，然后由虚拟机中的类加载器加载必要的class文件，包括jdk中的基础类（如String和Object等），然后由虚拟机进程解释class字节码指令，把这些字节码指令翻译成本机cpu能够识别的指令，才能在cpu上运行.</p><p>4.3 从这个层面上来看，在执行一个所谓的java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程，而不是我们写的一个个的class文件。这个叫做虚拟机的进程处理一些底层的操作，比如内存的分配和释放等等。我们编写的class文件只是虚拟机进程执行时需要的“原料”。这些“原料”在运行时被加载到虚拟机中，被虚拟机解释执行，以控制虚拟机实现我们java代码中所定义的一些相对高层的操作，比如创建一个文件等，可以将class文件中的信息看做对虚拟机的控制信息，也就是一种虚拟指令。</p><h2 id="五、JVM体系结构简介"><a href="#五、JVM体系结构简介" class="headerlink" title="五、JVM体系结构简介:"></a>五、JVM体系结构简介:</h2><p><img src="http://cdn.zzwwqq.xyz/static/images/JVM/jvm-1.2.png" alt></p><p>根据上图表达的内容，我们编译之后的class文件是作为Java虚拟机的原料被输入到Java虚拟机的内部的，那么具体由谁来做这一部分工作呢？其实在Java虚拟机内部，有一个叫做类加载器的子系统，这个子系统用来在运行时根据需要加载类。注意上面一句话中的“根据需要”四个字。在Java虚拟机执行过程中，只有他需要一个类的时候，才会调用类加载器来加载这个类，并不会在开始运行时加载所有的类。就像一个人，只有饿的时候才去吃饭，而不是一次把一年的饭都吃到肚子里。一般来说，虚拟机加载类的时机，在第一次使用一个新的类的时候。</p><p>由虚拟机加载的类，被加载到Java虚拟机内存中之后，虚拟机会读取并执行它里面存在的字节码指令。虚拟机中执行字节码指令的部分叫做<strong>执行引擎</strong>。就像一个人，不是把饭吃下去就完事了，还要进行消化，执行引擎就相当于人的肠胃系统。在执行的过程中还会把各个class文件动态的连接起来。</p><p>Java虚拟机会进行自动内存管理。具体说来就是自动释放没有用的对象，而不需要程序员编写代码来释放分配的内存。这部分工作由垃圾收集子系统负责。</p><p>一个Java虚拟机实例在运行过程中有三个子系统来保障它的正常运行，分别是类加载器子系统， 执行引擎子系统和垃圾收集子系统。 如下图所示：</p><p><img src="http://cdn.zzwwqq.xyz/static/images/JVM/jvm-1.3.png" alt></p><p>虚拟机的运行，必须加载class文件，并且执行class文件中的字节码指令。它做这么多事情，必须需要自己的空间。就像人吃下去的东西首先要放在胃中。虚拟机也需要空间来存放个中数据。首先，加载的字节码，需要一个单独的内存空间来存放；一个线程的执行，也需要内存空间来维护方法的调用关系，存放方法中的数据和中间计算结果；在执行的过程中，无法避免的要创建对象，创建的对象需要一个专门的内存空间来存放。</p><p><img src="http://cdn.zzwwqq.xyz/static/images/JVM/jvm-1.4.png" alt></p><h3 id="5-1-Java虚拟机-运行时数据区"><a href="#5-1-Java虚拟机-运行时数据区" class="headerlink" title="5.1 Java虚拟机 运行时数据区:"></a>5.1 Java虚拟机 运行时数据区:</h3><p><img src="http://cdn.zzwwqq.xyz/static/images/JVM/jvm-1.5.png" alt></p><h4 id="5-1-1程序计数器"><a href="#5-1-1程序计数器" class="headerlink" title="5.1.1程序计数器:"></a>5.1.1程序计数器:</h4><p>①: <strong>是一块较小的内存空间</strong>,  当前线程执行的字节码的行号指示器(记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。)<br>②: 指向下一条需要执行的指令<br>③: 每条线程都需要一个独立的程序计数器,彼此互不干扰(线程私有的内存)</p><h4 id="5-1-2Java虚拟机栈"><a href="#5-1-2Java虚拟机栈" class="headerlink" title="5.1.2Java虚拟机栈:"></a>5.1.2Java虚拟机栈:</h4><p>①: 线程私有的,生命周期与线程相同<br>②: 描述java方法执行的内存模型,每个方法执行时都会创建一个<strong>栈帧</strong>,用来存放<strong>局部变量表</strong>,<strong>操作数栈</strong>,<strong>常量池引用</strong>等信息.<br>③: <strong>每个方法从调用到执行完成 就对应着栈帧在虚拟机栈帧中入栈和出栈.</strong><br>④: 两种异常:<br>　　　　　　StackOverFlow异常 :     线程所请求的栈深度大于虚拟机允许的则抛出<br>　　　　　　OutOffMemoryError异常:     扩展时无法申请到足够的内存则抛出<br>⑤: 我们常说的栈 和堆  中的栈就是Java虚拟机栈,更具体来说是Java虚拟机栈中的局部变量表部分.<br>⑥: 局部变量表:<br>　　　　　　存放编译期可知的各种基本数据类型,对象引用类型<br>　　　　　　所需要的内存空间在编译期完成分配,  在方法运行期间不会改变其大小<br>　　　　　　64位长度的long  和 double 类型数据会占用2个局部变量空间(Slot) ,其余占一个.</p><p><img src="http://cdn.zzwwqq.xyz/static/images/JVM/jvm-1.6.png" alt></p><p>⑦: 可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小：<code>java -Xss512M HackTheJava</code></p><h4 id="5-1-3本地方法栈"><a href="#5-1-3本地方法栈" class="headerlink" title="5.1.3本地方法栈:"></a>5.1.3本地方法栈:</h4><p>本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。<br>本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。</p><p><strong>上面三个区域随线程而生,  随线程而灭; </strong></p><h4 id="5-1-4Java堆-Java-Heap-也称GC堆-Garbage-Collected-Heap"><a href="#5-1-4Java堆-Java-Heap-也称GC堆-Garbage-Collected-Heap" class="headerlink" title="5.1.4Java堆( Java Heap) :  也称GC堆(Garbage  Collected  Heap  )"></a>5.1.4Java堆( Java Heap) :  也称GC堆(Garbage  Collected  Heap  )</h4><p>①: 是Java虚拟机管理的内存中最大的一块<br>②: 被所有线程共享,的一块内存空间,  在虚拟机启动时候创建,<br>③: 唯一目的:  存放对象实例, 几乎所有的对象实例  和 数组   都在这里这里分配内存.<br>④: <strong>是垃圾收集器管理的主要区域 ,所以也称GC堆</strong><br>⑤: 堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。可以通过 -Xms 和 -Xmx 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。<br><code>java -Xms1M -Xmx2M HackTheJava</code></p><h4 id="5-1-5方法区-永久代"><a href="#5-1-5方法区-永久代" class="headerlink" title="5.1.5方法区(永久代):"></a>5.1.5方法区(永久代):</h4><p>①: 被所有线程共享,的一块内存空间<br>②: 用来存储Class的相关信息如已经被Java虚拟机<strong>加载的类信息</strong>,<strong>常量</strong>,<strong>静态变量</strong>,即时编译器编译后的代码等数据。<br>③: 和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。<br>④: <strong>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载</strong>，但是一般比较难实现。<br>⑤: HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，<strong>从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中</strong>。</p><h4 id="5-1-5运行时常量池"><a href="#5-1-5运行时常量池" class="headerlink" title="5.1.5运行时常量池"></a>5.1.5运行时常量池</h4><p>①: <strong>运行时常量池是方法区的一部分。</strong><br>②: Class 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。<br>③: 除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。</p><p>参考链接:<br><a href="https://baike.baidu.com/item/JVM" target="_blank" rel="noopener">https://baike.baidu.com/item/JVM</a><br><a href="https://blog.csdn.net/zhangjg_blog/article/details/20380971" target="_blank" rel="noopener">https://blog.csdn.net/zhangjg_blog/article/details/20380971</a><br><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md" target="_blank" rel="noopener">https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;768px&quot; height=&quot;367px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/JVM/jvm-1.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JVM" scheme="https://zzwwqq.xyz/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://zzwwqq.xyz/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="https://zzwwqq.xyz/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://zzwwqq.xyz/设计模式之策略模式.html</id>
    <published>2019-03-27T02:59:53.000Z</published>
    <updated>2019-03-27T03:43:06.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是策略模式"><a href="#一、什么是策略模式" class="headerlink" title="一、什么是策略模式?"></a>一、什么是策略模式?</h2><p>定义一系列算法，将每个算法封装到具有公共接口的一系列策略类中，从而使它们可以相互替换 &amp;<br>让算法可在不影响客户端的情况下发生变化<br>简单来说：准备一组算法 &amp; 将每一个算法封装起来，让外部按需调用 &amp; 使得互换</p><a id="more"></a><h2 id="二、如何使用-使用步骤"><a href="#二、如何使用-使用步骤" class="headerlink" title="二、如何使用?使用步骤?"></a>二、如何使用?使用步骤?</h2><p>步骤1： 定义抽象策略角色（Strategy）：百货公司所有促销活动的共同接口<br>步骤2：定义具体策略角色（Concrete Strategy）：每个节日具体的促销活动<br>步骤3：定义环境角色（Context）：用于连接上下文，即把促销活动推销给客户，这里可以理解为销售员<br>步骤4：客户端调用-让销售员进行促销活动的落地</p><h2 id="三、优点"><a href="#三、优点" class="headerlink" title="三、优点:"></a>三、优点:</h2><p>①: 策略类之间可以自由切换,由于策略类都实现同一个接口，所以使它们之间可以自由切换<br>②: 易于扩展,增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码<br>③: 符合“开闭原则“ 避免使用多重条件选择语句（if else），充分体现面向对象设计思想。</p><h2 id="四、缺点"><a href="#四、缺点" class="headerlink" title="四、缺点:"></a>四、缺点:</h2><p>①: 客户端必须知道所有的策略类，并自行决定使用哪一个策略类。<br>②: 策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</p><h2 id="五、应用场景"><a href="#五、应用场景" class="headerlink" title="五、应用场景:"></a>五、应用场景:</h2><p>动态选择多种复杂行为</p><h2 id="六、实例"><a href="#六、实例" class="headerlink" title="六、实例:"></a>六、实例:</h2><p>背景：小成有一家百货公司，最近在定年度的促销活动<br>冲突：每个节日用同一个促销活动太枯燥，没吸引力<br>解决方案：针对不同节目使用不同促销活动进行促销</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤1： 定义抽象策略角色（Strategy）：百货公司所有促销活动的共同接口</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//步骤2：定义具体策略角色（Concrete Strategy）：每个节日具体的促销活动</span></span><br><span class="line"><span class="comment">//为春节准备的促销活动A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyA</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"为春节准备的促销活动A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为中秋节准备的促销活动B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyB</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"为中秋准备的促销活动A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为国庆准备的促销活动C</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyC</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"为国庆准备的促销活动C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//步骤3：定义环境角色（Context）：用于连接上下文，即把促销活动推销给客户，这里可以理解为销售员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context_SaleMan</span> </span>&#123;</span><br><span class="line">    <span class="comment">//持有抽象策略角色的引用</span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，传入一个具体策略对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy 具体策略对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context_SaleMan</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向客户展示促销活动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sale_ManShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤4：客户端调用-让销售员进行促销活动的落地</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyPattern</span> </span>&#123;</span><br><span class="line">    <span class="comment">//程序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         Context_SaleMan saleMan;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择并创建需要使用的策略对象</span></span><br><span class="line">        <span class="comment">// 例如现在要做春节的活动</span></span><br><span class="line">        Strategy strategyA = <span class="keyword">new</span> StrategyA();</span><br><span class="line">        System.out.println(<span class="string">"对于春节："</span>);</span><br><span class="line">        <span class="comment">// 创建环境</span></span><br><span class="line">        saleMan = <span class="keyword">new</span> Context_SaleMan(strategyA);</span><br><span class="line">        saleMan.Sale_ManShow();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择并创建需要使用的策略对象</span></span><br><span class="line">        <span class="comment">// 例如现在要做中秋节的活动</span></span><br><span class="line">        Strategy strategyB = <span class="keyword">new</span> StrategyB();</span><br><span class="line">        System.out.println(<span class="string">"对于中秋节："</span>);</span><br><span class="line">        <span class="comment">// 创建环境</span></span><br><span class="line">        saleMan = <span class="keyword">new</span> Context_SaleMan(strategyB);</span><br><span class="line">        saleMan.Sale_ManShow();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择并创建需要使用的策略对象</span></span><br><span class="line">        <span class="comment">// 例如现在要做国庆节的活动</span></span><br><span class="line">        Strategy strategyC = <span class="keyword">new</span> StrategyC();</span><br><span class="line">        System.out.println(<span class="string">"对于国庆节："</span>);</span><br><span class="line">        <span class="comment">// 创建环境</span></span><br><span class="line">        saleMan = <span class="keyword">new</span> Context_SaleMan(strategyC);</span><br><span class="line">        saleMan.Sale_ManShow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、什么是策略模式&quot;&gt;&lt;a href=&quot;#一、什么是策略模式&quot; class=&quot;headerlink&quot; title=&quot;一、什么是策略模式?&quot;&gt;&lt;/a&gt;一、什么是策略模式?&lt;/h2&gt;&lt;p&gt;定义一系列算法，将每个算法封装到具有公共接口的一系列策略类中，从而使它们可以相互替换 &amp;amp;&lt;br&gt;让算法可在不影响客户端的情况下发生变化&lt;br&gt;简单来说：准备一组算法 &amp;amp; 将每一个算法封装起来，让外部按需调用 &amp;amp; 使得互换&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://zzwwqq.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式之策略模式" scheme="https://zzwwqq.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之抽象工厂模式</title>
    <link href="https://zzwwqq.xyz/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://zzwwqq.xyz/设计模式之抽象工厂模式.html</id>
    <published>2019-03-26T08:50:29.000Z</published>
    <updated>2019-03-26T09:52:37.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是抽象工厂模式"><a href="#什么是抽象工厂模式" class="headerlink" title="什么是抽象工厂模式?"></a>什么是抽象工厂模式?</h2><p>抽象工厂模式，即Abstract Factory Pattern，提供一个创建一系列相关或相互依赖对象的接口，<br>而无须指定它们具体的类；具体的工厂负责实现具体的产品实例。</p><a id="more"></a><h2 id="抽象工厂模式与工厂方法模式最大的区别"><a href="#抽象工厂模式与工厂方法模式最大的区别" class="headerlink" title="抽象工厂模式与工厂方法模式最大的区别?"></a>抽象工厂模式与工厂方法模式最大的区别?</h2><p>抽象工厂中每个工厂可以创建多种类的产品, 而工厂方法每个工厂只能创建一类.</p><h2 id="使用步骤-根据下图来理解"><a href="#使用步骤-根据下图来理解" class="headerlink" title="使用步骤:(根据下图来理解:)"></a>使用步骤:(根据下图来理解:)</h2><p>步骤1： 创建抽象工厂类，定义具体工厂的公共接口；<br>步骤2： 创建抽象产品族类 ，定义抽象产品的公共接口；<br>步骤3： 创建抽象产品类 （继承抽象产品族类），定义具体产品的公共接口；<br>步骤4： 创建具体产品类（继承抽象产品类） &amp; 定义生产的具体产品；<br>步骤5：创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；<br>步骤6：客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例</p><p><img src="http://cdn.zzwwqq.xyz/static/images/设计模式/DesignPatterns-4.1.1.png" alt></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h2><p>①: 降低耦合:<br>　　　　　抽象工厂模式将具体产品的创建延迟到具体工厂的子类中，这样将对象的创建封装起来，<br>　　　　　可以减少客户端与具体产品类之间的依赖，从而使系统耦合度低，这样更有利于后期的维护和扩展；<br>②: 更符合开-闭原则:<br>　　　　　新增一种产品类时，只需要增加相应的具体产品类和相应的工厂子类即可<br>　　　　　而简单工厂模式需要修改工厂类的判断逻辑</p><p>③: 符合单一职责原则:<br>　　　　　每个具体工厂类只负责创建对应的产品，<br>　　　　　而简单工厂中的工厂类存在复杂的switch逻辑判断<br>④: 不使用静态工厂方法，可以形成基于继承的等级结构，<br>　而简单工厂模式的工厂类使用静态工厂方法</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h2><p>①: 抽象工厂模式很难支持新种类产品的变化。<br>这是因为抽象工厂接口中已经确定了可以被创建的产品集合，如果需要添加新产品，此时就必须去修改抽象工厂的接口，这样就涉及到抽象工厂类的以及所有子类的改变，这样也就违背了“开发——封闭”原则。<br>②: 对于新的产品族符合开-闭原则；对于新的产品种类不符合开-闭原则，这一特性称为开-闭原则的倾斜性。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景:"></a>应用场景:</h2><p>①: 一个系统不要求依赖产品类实例如何被创建、组合和表达的表达，这点也是所有工厂模式应用的前提。<br>②: 这个系统有多个系列产品，而系统中只消费其中某一系列产品<br>③: 系统要求提供一个产品类的库，所有产品以同样的接口出现，客户端不需要依赖具体实现。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h2><p>背景：<br>　　小成有两间塑料加工厂（A厂仅生产容器类产品；B厂仅生产模具类产品）；随着客户需求的变化，A厂所在地的客户  　　也需要模具类产品，B厂所在地的客户也需要容器类产品；<br>冲突：没有资源（资金+租位）在当地分别开设多一家注塑分厂.<br>解决方案：在原有的两家塑料厂里增设生产需求的功能，即A厂能生产容器+模具产品；B厂间能生产模具+容器产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤1： 创建抽象工厂类，定义具体工厂的公共接口</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">abstract</span> Product  <span class="title">ManufactureContainer</span><span class="params">()</span></span>;<span class="comment">//容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">abstract</span> Product  <span class="title">ManufactureMould</span><span class="params">()</span></span>;<span class="comment">//模型</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤2： 创建抽象产品族类 ，定义具体产品的公共接口；</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProduct</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤3： 创建抽象产品类 ，定义具体产品的公共接口；</span></span><br><span class="line"><span class="comment">//容器产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerProduct</span> <span class="keyword">extends</span> <span class="title">AbstractProduct</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模型产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MouldProduct</span> <span class="keyword">extends</span> <span class="title">AbstractProduct</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤4： 创建具体产品类（继承抽象产品类）， 定义生产的具体产品；</span></span><br><span class="line"><span class="comment">//容器产品A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerProductA</span> <span class="keyword">extends</span> <span class="title">ContainerProduct</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了容器产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器产品B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContainerProductB</span> <span class="keyword">extends</span> <span class="title">ContainerProduct</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了容器产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模具产品A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouldProductA</span> <span class="keyword">extends</span> <span class="title">MouldProduct</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了模具产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模具产品B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MouldProductB</span> <span class="keyword">extends</span> <span class="title">MouldProduct</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出了模具产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤5：创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；</span></span><br><span class="line"><span class="comment">//A厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContainerProductA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureMould</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MouldProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//B厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ContainerProductB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">ManufactureMould</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MouldProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤6：客户端通过实例化具体的工厂类，并调用其创建不同目标产品的方法创建不同具体产品类的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory myfactoryA = <span class="keyword">new</span> FactoryA();</span><br><span class="line">        Factory myfactoryB = <span class="keyword">new</span> FactoryB();</span><br><span class="line">        <span class="comment">//A厂当地客户需要容器产品A</span></span><br><span class="line">        myfactoryA.ManufactureContainer().show();</span><br><span class="line">        <span class="comment">//A厂当地客户需要模具产品A</span></span><br><span class="line">        myfactoryA.ManufactureMould().show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//B厂当地客户需要容器产品B</span></span><br><span class="line">        myfactoryB.ManufactureContainer().show();</span><br><span class="line">        <span class="comment">//B厂当地客户需要模具产品B</span></span><br><span class="line">        myfactoryB.ManufactureMould().show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是抽象工厂模式&quot;&gt;&lt;a href=&quot;#什么是抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;什么是抽象工厂模式?&quot;&gt;&lt;/a&gt;什么是抽象工厂模式?&lt;/h2&gt;&lt;p&gt;抽象工厂模式，即Abstract Factory Pattern，提供一个创建一系列相关或相互依赖对象的接口，&lt;br&gt;而无须指定它们具体的类；具体的工厂负责实现具体的产品实例。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://zzwwqq.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式之抽象工厂模式" scheme="https://zzwwqq.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-2两数相加</title>
    <link href="https://zzwwqq.xyz/LeetCode-2%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.html"/>
    <id>https://zzwwqq.xyz/LeetCode-2两数相加.html</id>
    <published>2019-03-26T04:39:10.000Z</published>
    <updated>2019-03-27T04:32:30.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h3><p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><a id="more"></a><p> <strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">输出：<span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line">原因：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807</span></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>建立一个新链表，然后把输入的两个链表从头往后遍历，每两个相加，添加一个新节点到新链表后面。为了避免两个输入链表同时为空，我们建立一个dummy结点，将两个结点相加生成的新结点按顺序加到dummy结点之后，由于dummy结点本身不能变，所以我们用一个指针cur来指向新链表的最后一个结点。<br>好，可以开始让两个链表相加了，这道题好就好在最低位在链表的开头，所以我们可以在遍历链表的同时按从低到高的顺序直接相加。<br>while循环的条件两个链表中只要有一个不为空行，由于链表可能为空，所以我们在取当前结点值的时候，先判断一下，若为空则取0，否则取结点值。然后把两个结点值相加，同时还要加上进位carry。然后更新carry，直接 sum/10 即可，然后以 sum%10 为值建立一个新结点，连到cur后面，然后cur移动到下一个结点。之后再更新两个结点，若存在，则指向下一个位置。while循环退出之后，最高位的进位问题要最后特殊处理一下，若carry为1，则再建一个值为1的结点，代码如下：</p><p><img src="http://cdn.zzwwqq.xyz/static/images/LeetCode/LeetCode-2.1.1.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;   <span class="comment">//l1,l2相当于指向两个链表表头的指针</span></span><br><span class="line">    <span class="comment">//为了避免两个输入链表同时为空，我们建立一个dummy结点，将两个结点相加生成的新结点按顺序加到dummy结点之后</span></span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//由于dummy结点本身不能变，所以我们用一个指针cur来指向新链表的最后一个结点</span></span><br><span class="line">    ListNode cur = dummy;</span><br><span class="line">    <span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//至少有一个结点不为空</span></span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//结点为空,那么值就设置为0,不为空取出结点所存放的值</span></span><br><span class="line">        <span class="keyword">int</span> d1 = l1 == <span class="keyword">null</span> ? <span class="number">0</span> : l1.val;</span><br><span class="line">        <span class="keyword">int</span> d2 = l2 == <span class="keyword">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">        <span class="comment">//两个链表中对应结点的值求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = d1 + d2 + carry;</span><br><span class="line">        carry = sum &gt;= <span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span>; <span class="comment">//sum不会超过二十,所以最多进1位</span></span><br><span class="line">        cur.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);<span class="comment">//造一个新结点,将两个链表对应结点的两数之和,存到新链表的新结点</span></span><br><span class="line">        cur = cur.next;<span class="comment">//移动cur指针,指向下一个结点</span></span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            l1 = l1.next;<span class="comment">//移动l1指针</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            l2 = l2.next;<span class="comment">//移动l2指针</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//循环结束</span></span><br><span class="line">    <span class="comment">//如果最高位相加,产生进位,需要再造一个结点</span></span><br><span class="line">    <span class="keyword">if</span> (carry == <span class="number">1</span>) &#123;</span><br><span class="line">        cur.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">addTwoNumbers</span> </span>&#123;</span><br><span class="line"><span class="comment">//程序入口函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//建立第一个链表</span></span><br><span class="line">        ListNode listNode1 =  <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode listNode2 =  <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        ListNode listNode3 =  <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        listNode1.next=listNode2;</span><br><span class="line">        listNode2.next=listNode3;</span><br><span class="line">        listNode3.next=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立第二个链表</span></span><br><span class="line">        ListNode listNode4 =  <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        ListNode listNode5 =  <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">        ListNode listNode6 =  <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        listNode4.next=listNode5;</span><br><span class="line">        listNode5.next=listNode6;</span><br><span class="line">        listNode6.next=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        ListNode listNode = <span class="keyword">new</span> addTwoNumbers().addTwoNumbers(listNode1,listNode4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果: ListNode&#123;val=7, next=ListNode&#123;val=0, next=ListNode&#123;val=8, next=null&#125;&#125;&#125;</span></span><br><span class="line">        System.out.println(listNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接:<br><a href="http://www.cnblogs.com/grandyang/p/4129891.html" target="_blank" rel="noopener">http://www.cnblogs.com/grandyang/p/4129891.html</a><br><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目:&quot;&gt;&lt;/a&gt;题目:&lt;/h3&gt;&lt;p&gt;给出两个 &lt;strong&gt;非空&lt;/strong&gt; 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 &lt;strong&gt;逆序&lt;/strong&gt; 的方式存储的，并且它们的每个节点只能存储 &lt;strong&gt;一位&lt;/strong&gt; 数字。&lt;br&gt;如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。&lt;br&gt;您可以假设除了数字 0 之外，这两个数都不会以 0 开头。&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode刷题" scheme="https://zzwwqq.xyz/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://zzwwqq.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂方法模式</title>
    <link href="https://zzwwqq.xyz/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://zzwwqq.xyz/设计模式之工厂方法模式.html</id>
    <published>2019-03-26T03:29:50.000Z</published>
    <updated>2019-03-26T04:32:53.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是工厂方法模式"><a href="#一、什么是工厂方法模式" class="headerlink" title="一、什么是工厂方法模式?"></a>一、什么是工厂方法模式?</h2><p>①: 工厂方法模式，又称工厂模式、多态工厂模式和虚拟构造器模式，通过定义工厂父类负责定义创建对象的公共接口(抽象方法)，而子类重写接口(抽象方法)则负责生成具体的对象。<br>③: 简言之:工厂里面造对象,对象所属类里面造产品</p><a id="more"></a><h2 id="二、如何使用-使用步骤"><a href="#二、如何使用-使用步骤" class="headerlink" title="二、如何使用?使用步骤?"></a>二、如何使用?使用步骤?</h2><p>步骤1： 创建抽象工厂类，定义具体工厂的公共接口(抽象方法)；<br>步骤2： 创建抽象产品类 ，定义具体产品的公共接口(抽象方法)；<br>步骤3： 创建具体产品类（继承抽象产品类） &amp; 定义生产的具体产品；<br>步骤4： 创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例(对象)的方法；<br>步骤5：外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例</p><h2 id="三、优点"><a href="#三、优点" class="headerlink" title="三、优点:"></a>三、优点:</h2><p>①: 更符合开-闭原则:<br>　　　　　　　新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可,<br>　　　　　　　而简单工厂模式需要修改工厂类的判断逻辑<br>②: 符合单一职责原则:<br>　　　　　　　每个具体工厂类只负责创建对应的产品,<br>　　　　　　　而简单工厂中的工厂类存在复杂的switch逻辑判断,<br>　　　　　　　它不使用静态工厂方法，可以形成基于继承的等级结构。<br>　　　　　　　而简单工厂模式的工厂类使用静态工厂方法</p><h2 id="四、缺点"><a href="#四、缺点" class="headerlink" title="四、缺点:"></a>四、缺点:</h2><p>①: 添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；<br>②: 同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；<br>③: 由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。<br>④: 虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类；<br>⑤: 一个具体工厂只能创建一种具体产品</p><h2 id="五、应用场景"><a href="#五、应用场景" class="headerlink" title="五、应用场景:"></a>五、应用场景:</h2><p>①: 当一个类不知道它所需要的对象的类时<br>②: 当一个类希望通过其子类来指定创建对象时<br>③: 在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。<br>④: 将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</p><h2 id="六、实例"><a href="#六、实例" class="headerlink" title="六、实例:"></a>六、实例:</h2><p>背景：小成有一间塑料加工厂（仅生产A类产品）；随着客户需求的变化，客户需要生产B类产品；<br>冲突：改变原有塑料加工厂的配置和变化非常困难，假设下一次客户需要再发生变化，再次改变将增大非常大的成本；<br>解决方案：小成决定置办塑料分厂B来生产B类产品；</p><p>//步骤1： 创建抽象工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Product <span class="title">Manufacture</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//步骤2： 创建抽象产品类 ，定义具体产品的公共接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//步骤3： 创建具体产品类（继承抽象产品类）， 定义生产的具体产品,代码如下:<br>//步骤4：创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//步骤3： 创建具体产品类（继承抽象产品类）， 定义生产的具体产品,代码如下: </span></span><br><span class="line"><span class="comment">//具体产品A类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出产品A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体产品B类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出产品B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤4：创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；</span></span><br><span class="line"><span class="comment">//工厂A类 - 生产A类产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Product <span class="title">Manufacture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂B类 - 生产B类产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Product <span class="title">Manufacture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产工作流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//客户要产品A</span></span><br><span class="line">        FactoryA myfactoryA = <span class="keyword">new</span> FactoryA();</span><br><span class="line">        myfactoryA.Manufacture().show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品B</span></span><br><span class="line">        FactoryB myFactoryB = <span class="keyword">new</span> FactoryB();</span><br><span class="line">        myFactoryB.Manufacture().show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="七、总结："><a href="#七、总结：" class="headerlink" title="七、总结："></a>七、总结：</h2><p>工厂模式可以说是简单工厂模式的进一步抽象和拓展，在保留了简单工厂的封装优点的同时，让扩展变得简单，让继承变得可行，增加了多态性的体现。</p><p>参考文章:<br><a href="https://www.jianshu.com/p/e55fbddc071c" target="_blank" rel="noopener">https://www.jianshu.com/p/e55fbddc071c</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、什么是工厂方法模式&quot;&gt;&lt;a href=&quot;#一、什么是工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;一、什么是工厂方法模式?&quot;&gt;&lt;/a&gt;一、什么是工厂方法模式?&lt;/h2&gt;&lt;p&gt;①: 工厂方法模式，又称工厂模式、多态工厂模式和虚拟构造器模式，通过定义工厂父类负责定义创建对象的公共接口(抽象方法)，而子类重写接口(抽象方法)则负责生成具体的对象。&lt;br&gt;③: 简言之:工厂里面造对象,对象所属类里面造产品&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://zzwwqq.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式之工厂方法模式" scheme="https://zzwwqq.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之简单工厂模式</title>
    <link href="https://zzwwqq.xyz/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://zzwwqq.xyz/设计模式之简单工厂模式.html</id>
    <published>2019-03-26T03:06:08.000Z</published>
    <updated>2019-03-26T04:33:15.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是简单工厂模式"><a href="#一、什么是简单工厂模式" class="headerlink" title="一、什么是简单工厂模式?"></a>一、什么是简单工厂模式?</h2><p>①: 简单工厂模式又叫静态方法模式（因为工厂类定义了一个静态方法）</p><p>②: 现实生活中，工厂是负责生产产品的；同样在设计模式中，简单工厂模式我们可以理解为负责生产对象的一个类，称为“工厂类”。</p><a id="more"></a><h2 id="二、如何使用-使用步骤"><a href="#二、如何使用-使用步骤" class="headerlink" title="二、如何使用?使用步骤?:"></a>二、如何使用?使用步骤?:</h2><p>①: 创建抽象产品类 &amp; 定义具体产品的公共接口；<br>②: 创建具体产品类（继承抽象产品类） &amp; 定义生产的具体产品；<br>③: 创建工厂类，通过创建静态方法根据传入不同参数从而创建不同具体产品类的实例；<br>④: 外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例</p><h2 id="三、优点"><a href="#三、优点" class="headerlink" title="三、优点:"></a>三、优点:</h2><p>①: 将创建实例的工作与使用实例的工作分开，使用者不必关心类对象如何创建，实现了解耦；<br>②: 把初始化实例时的工作放到工厂里进行，使代码更容易维护。<br>③: 更符合面向对象的原则 &amp; 面向接口编程，而不是面向实现编程。</p><h2 id="四、缺点"><a href="#四、缺点" class="headerlink" title="四、缺点:"></a>四、缺点:</h2><p>①: 工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响；<br>②: 违背“开放 - 关闭原则”，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。<br>③: 简单工厂模式由于使用了静态工厂方法，静态方法不能被继承和重写，会造成工厂角色无法形成基于继承的等级结构。</p><h2 id="五、应用场景"><a href="#五、应用场景" class="headerlink" title="五、应用场景:"></a>五、应用场景:</h2><p>①: 客户如果只知道传入工厂类的参数，对于如何创建对象的逻辑不关心时；<br>②: 当工厂类负责创建的对象（具体产品）比较少时。</p><h2 id="六、实例"><a href="#六、实例" class="headerlink" title="六、实例:"></a>六、实例:</h2><p>背景：小成有一个塑料生产厂，用来做塑料加工生意<br>目的：最近推出了3个产品，小成希望使用简单工厂模式实现3款产品的生产</p><p>//步骤1. 创建抽象产品类，定义具体产品的公共接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//步骤2.创建具体产品类（继承抽象产品类），定义生产的具体产品,      代码如下:<br>//步骤4. 外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例,   代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体产品类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出A产品!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出B产品!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类C</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductC</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产出C产品!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//步骤4. 外界通过调用工厂类的静态方法，传入不同参数从而创建不同具体产品类的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要A产品</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Factory.Manufacture(<span class="string">"A"</span>).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"没有A产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要B产品</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Factory.Manufacture(<span class="string">"B"</span>).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有B产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要C产品</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Factory.Manufacture(<span class="string">"C"</span>).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有C产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要D产品</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Factory.Manufacture(<span class="string">"D"</span>).show();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有这一类产品"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//步骤3. 创建工厂类，通过创建静态方法从而根据传入不同参数创建不同具体产品类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">Manufacture</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line"><span class="comment">//工厂类里用switch语句控制生产哪种商品；</span></span><br><span class="line"><span class="comment">//使用者只需要调用工厂类的静态方法就可以实现产品类的实例化</span></span><br><span class="line">        <span class="keyword">switch</span>(productName) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductC();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章:<br><a href="https://www.jianshu.com/p/e55fbddc071c" target="_blank" rel="noopener">https://www.jianshu.com/p/e55fbddc071c</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、什么是简单工厂模式&quot;&gt;&lt;a href=&quot;#一、什么是简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;一、什么是简单工厂模式?&quot;&gt;&lt;/a&gt;一、什么是简单工厂模式?&lt;/h2&gt;&lt;p&gt;①: 简单工厂模式又叫静态方法模式（因为工厂类定义了一个静态方法）&lt;/p&gt;
&lt;p&gt;②: 现实生活中，工厂是负责生产产品的；同样在设计模式中，简单工厂模式我们可以理解为负责生产对象的一个类，称为“工厂类”。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://zzwwqq.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式之简单工厂模式" scheme="https://zzwwqq.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>TCP-三次握手和四次挥手</title>
    <link href="https://zzwwqq.xyz/TCP-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.html"/>
    <id>https://zzwwqq.xyz/TCP-三次握手和四次挥手.html</id>
    <published>2019-03-25T14:05:46.000Z</published>
    <updated>2019-03-27T05:31:56.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、字段说明"><a href="#一、字段说明" class="headerlink" title="一、字段说明:"></a>一、字段说明:</h2><table><thead><tr><th>字段:</th><th>含义:</th></tr></thead><tbody><tr><td>SYN,seq</td><td>同步报文段</td></tr><tr><td>ACK,ack</td><td>确认报文段</td></tr><tr><td>ack</td><td>确认号</td></tr><tr><td>seq</td><td>序列号</td></tr><tr><td>SYN</td><td>同步位</td></tr><tr><td>FIN</td><td>终止位</td></tr><tr><td>ACK</td><td>确认位</td></tr></tbody></table><a id="more"></a><h2 id="二、三次握手"><a href="#二、三次握手" class="headerlink" title="二、三次握手:"></a>二、三次握手:</h2><p>第一次:  连接请求报文段:  SYN=1(请求连接)  初始序号seq=x(客户端初始序号)<br>第二次:  确认报文段(同意连接): SYN =1(请求连接) seq= y(服务器自己的初始序号)  ACK = 1(确认收到) ack = x+1(确认号)<br>第三次: 确认报文段:ACK=1(确认收到)   seq=x+1 (客户端序号) ack=y+1(确认号)  确认号ack是上一次的序号seq加1</p><p>总结: ack的值等于对方上一次发送的报文段中的seq的值加一,<br>​    seq的值等于自己上一次发送的报文段中的seq的值加一(第一次seq值任意取)</p><p><img src="http://cdn.zzwwqq.xyz/static/images/操作系统/OS-1.1.png" alt></p><p>简图:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/操作系统/OS-1.2.png" alt></p><ul><li>B 处于 LISTEN（监听）状态，等待来自 A 的连接请求。</li><li>A 向 B 发送连接请求报文 SYN。</li><li>B 收到 A 发来的 SYN，如果同意建立连接，则向 A 发送连接确认报文 SYN ACK。</li><li>A 收到 SYN ACK 后，还要向 B 发出确认报文 ACK。</li><li>B 收到 ACK 后，连接建立。</li></ul><p><strong>应该注意到，接收了 SYN 之后的所有报文都存在 ACK 字段。</strong></p><h2 id="三、三次握手的原因"><a href="#三、三次握手的原因" class="headerlink" title="三、三次握手的原因:"></a>三、三次握手的原因:</h2><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><h2 id="四、四次挥手"><a href="#四、四次挥手" class="headerlink" title="四、四次挥手:"></a>四、四次挥手:</h2><p><img src="http://cdn.zzwwqq.xyz/static/images/操作系统/OS-1.3.png" alt></p><p>简图:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/操作系统/OS-1.4.png" alt></p><p>第一次:     连接释放报文段:  FIN=1    seq=u(u为前面已经传送过的数据的最后一个字节的序号加一)</p><p>第二次:     连接释放确认报文段:  确认只断开A—B   ACK= 1(确认收到)  ack=u+1(确认号)   seq=v(v为为前面已经传送过的数据的最后一个字节的序号加一)</p><p>第三次:     连接释放确认报文段:  断开B—-A       FIN = 1   ACK =1   ack=u+1   seq=w(seq=v后还发送了数据, w是前面已经传送过的数据的最后一个字节的序号加一)</p><p>第四次:      连接释放确认报文段 :  确认断开B—A       ACK=1  ack = w+1    seq=u+1    </p><ul><li>A 发送连接释放报文 FIN。</li><li>B 收到 FIN 之后发出确认 ACK，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li><li>当 B 不再需要连接时，发送连接释放报文 FIN。</li><li>A 收到 FIN 后发出确认 ACK，进入 TIME-WAIT 状态，等待 2 倍的 MSL（最大报文存活时间）后释放连接。</li><li>B 收到 ACK 后释放连接。</li></ul><h2 id="五、四次挥手的原因"><a href="#五、四次挥手的原因" class="headerlink" title="五、四次挥手的原因:"></a>五、四次挥手的原因:</h2><p>客户端发送了 FIN 连接释放报文之后，服务器端收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器端会发送 FIN 连接释放报文。</p><h2 id="六、为什么还要设置一个Time-WAIT"><a href="#六、为什么还要设置一个Time-WAIT" class="headerlink" title="六、为什么还要设置一个Time-WAIT ?"></a>六、为什么还要设置一个Time-WAIT ?</h2><p>客户端接收到服务器端的 FIN 报文后进入此状态，而并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li>确保最后一个确认报文 ACK 能够到达。如果服务器端没收到客户端发送来的确认报文 ACK，那么就需要重新发送连接释放请求报文 FIN，客户端等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本次连接持续时间内产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文 SYN，从而错误打开连接。</li></ul><p>参考文章:<br><a href="https://mp.weixin.qq.com/s/tGlWTrr5KLAv1AflfeAejA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/tGlWTrr5KLAv1AflfeAejA</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、字段说明&quot;&gt;&lt;a href=&quot;#一、字段说明&quot; class=&quot;headerlink&quot; title=&quot;一、字段说明:&quot;&gt;&lt;/a&gt;一、字段说明:&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段:&lt;/th&gt;
&lt;th&gt;含义:&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SYN,seq&lt;/td&gt;
&lt;td&gt;同步报文段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACK,ack&lt;/td&gt;
&lt;td&gt;确认报文段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ack&lt;/td&gt;
&lt;td&gt;确认号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seq&lt;/td&gt;
&lt;td&gt;序列号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SYN&lt;/td&gt;
&lt;td&gt;同步位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIN&lt;/td&gt;
&lt;td&gt;终止位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACK&lt;/td&gt;
&lt;td&gt;确认位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="操作系统" scheme="https://zzwwqq.xyz/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="TCP-三次握手和四次挥手" scheme="https://zzwwqq.xyz/tags/TCP-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-1两数之和</title>
    <link href="https://zzwwqq.xyz/LeetCode-1%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html"/>
    <id>https://zzwwqq.xyz/LeetCode-1两数之和.html</id>
    <published>2019-03-25T11:24:28.000Z</published>
    <updated>2019-03-27T04:39:51.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h3><p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span></span><br><span class="line">所以返回 [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>这道题给了我们一个数组，还有一个目标数target，让我们找到两个数字，使其和为target，乍一看就感觉可以用暴力搜索(遍历所有的两个数字的组合，然后算其和), 但是时间复杂度是O(n^2)。能否想个O(n)的算法来实现，一般来说，我们为了提高时间的复杂度，需要用空间来换，这算是一个trade off吧，我们只想用线性的时间复杂度来解决问题，那么就是说只能遍历一个数字，那么另一个数字呢，我们可以事先将其存储起来，使用一个HashMap，来建立数字和其坐标位置之间的映射，我们都知道HashMap是常数级的查找效率，这样，我们在遍历数组的时候，用target减去遍历到的数字，就是另一个需要的数字了，直接在HashMap中查找其是否存在即可，注意要判断查找到的数字不是第一个数字，比如target是4，遍历到了一个2，那么另外一个2不能是之前那个2，整个实现步骤为：先遍历一遍数组，建立HashMap映射，然后再遍历一遍，开始查找，找到则记录index。代码如下：</p><p>法一: 暴力搜索(不采用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> result[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123; <span class="comment">//0 1 2</span></span><br><span class="line">           <span class="keyword">for</span> (j = i; j &lt; nums.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">               t = nums[i] + nums[j + <span class="number">1</span>];</span><br><span class="line">               <span class="keyword">if</span> (t == target) &#123;</span><br><span class="line">                   result[<span class="number">0</span>] = i;</span><br><span class="line">                   result[<span class="number">1</span>] = j + <span class="number">1</span>;</span><br><span class="line">                   <span class="keyword">return</span> result;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>法二: 使用HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] sums,<span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; sums.length;i++)&#123;</span><br><span class="line">            hashMap.put(sums[i],i);<span class="comment">//把值存到HashMap,数作为键,下标作为值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; sums.length;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = target - sums[i];</span><br><span class="line">            <span class="keyword">if</span>(hashMap.containsKey(t) &amp;&amp; hashMap.get(t) != i) &#123;</span><br><span class="line">                result[<span class="number">0</span>] = i;</span><br><span class="line">                result[<span class="number">1</span>] = hashMap.get(t);</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//一旦找到了,就立刻终止循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span> </span>&#123;</span><br><span class="line">    <span class="comment">//程序入口函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> []nums =  <span class="keyword">new</span> <span class="keyword">int</span> []&#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;;</span><br><span class="line">       <span class="keyword">int</span> target = <span class="number">9</span>;</span><br><span class="line">       <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        result = <span class="keyword">new</span> TwoSum().twoSum(nums,target);</span><br><span class="line">        <span class="comment">//打印结果: [0,1]</span></span><br><span class="line">        System.out.println(<span class="string">"["</span>+result[<span class="number">0</span>]+<span class="string">","</span>+result[<span class="number">1</span>]+<span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考链接:<br><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum/</a><br><a href="http://www.cnblogs.com/grandyang/p/4130379.html" target="_blank" rel="noopener">http://www.cnblogs.com/grandyang/p/4130379.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;768px&quot; height=&quot;367px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/LeetCode/LeetCode-1.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode刷题" scheme="https://zzwwqq.xyz/categories/LeetCode%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://zzwwqq.xyz/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="https://zzwwqq.xyz/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://zzwwqq.xyz/设计模式之单例模式.html</id>
    <published>2019-03-25T04:41:46.000Z</published>
    <updated>2019-03-25T05:50:44.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是单例模式"><a href="#一、什么是单例模式" class="headerlink" title="一、什么是单例模式?"></a>一、什么是单例模式?</h2><p>　　实现1个类只有1个实例化对象并提供一个全局访问点.</p><h2 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理:"></a>二、工作原理:</h2><p>　　保证在内存中只有一个对象存在.<br>　　在Java中，我们通过使用对象（类实例化后）来操作这些类，类实例化是通过它的构造方法进行的，<br>　　要是想实现一个类只有一个实例化对象，就要对类的构造方法下功夫</p><h2 id="三、如何去保证内存中只有一个对象存在"><a href="#三、如何去保证内存中只有一个对象存在" class="headerlink" title="三、如何去保证内存中只有一个对象存在?"></a>三、如何去保证内存中只有一个对象存在?</h2><p>　　①: 构造函数私有化<br>　　②: 自己创建当前类的对象<br>　　③: 对外提供公共的方法(获取已经创建好的对象)</p><h2 id="四、使用步骤"><a href="#四、使用步骤" class="headerlink" title="四、使用步骤:"></a>四、使用步骤:</h2><ol><li>创建私有变量 OurInstance,（用以记录 Singleton 的唯一实例）,内部进行实例化</li><li>把类的构造方法私有化，不让外部调用构造方法实例化(构造方法只能在本类中调用)</li><li>定义公有方法提供该类的全局唯一访问点外部通过调用newInstance()方法来返回唯一的实例</li></ol><h2 id="五、优点"><a href="#五、优点" class="headerlink" title="五、优点:"></a>五、优点:</h2><p>　　提供了对唯一实例的受控访问；<br>　　由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能；<br>　　可以根据实际情况需要，在单例模式的基础上扩展做出双例模式，多例模式；</p><h2 id="六、缺点"><a href="#六、缺点" class="headerlink" title="六、缺点:"></a>六、缺点:</h2><p>　　单例类的职责过重，里面的代码可能会过于复杂，在一定程度上违背了“单一职责原则”。<br>　　如果实例化的对象长时间不被利用，会被系统认为是垃圾而被回收，这将导致对象状态的丢失。</p><h2 id="七、单例模式的实现方式"><a href="#七、单例模式的实现方式" class="headerlink" title="七、单例模式的实现方式:"></a>七、单例模式的实现方式:</h2><p>可分为2大类、6种实现方式:<br>　　第一大类: 初始化单例类时 即 创建单例<br>　　　　　实现方式1: 饿汉式<br>　　　　　实现方式2: 枚举类型</p><p>　　第二大类: 按需,延迟创建单例<br>　　　　　实现方式3: 懒汉式的基础实现<br>　　　　　实现方式4: 懒汉式的改进—&gt;同步锁<br>　　　　　实现方式5: 懒汉式的改进—&gt;双重检验锁<br>　　　　　实现方式6: 静态内部类</p><h2 id="八、饿汉式和懒汉式的区别"><a href="#八、饿汉式和懒汉式的区别" class="headerlink" title="八、饿汉式和懒汉式的区别:"></a>八、饿汉式和懒汉式的区别:</h2><p>　　饿汉式: 随类的加载而创建对象<br>　　懒汉式: 上来不创建对象,当调用的时候,再创建对象,以后使用的就是同一个对象了<br>　　懒汉式: 懒加载,延迟加载</p><p><img src="http://cdn.zzwwqq.xyz/static/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/DesignPatterns-2.2.png" alt></p><h2 id="九、实现方式详解"><a href="#九、实现方式详解" class="headerlink" title="九、实现方式详解:"></a>九、实现方式详解:</h2><h3 id="9-1-实现方式1-饿汉式"><a href="#9-1-实现方式1-饿汉式" class="headerlink" title="9.1 实现方式1: 饿汉式"></a>9.1 实现方式1: 饿汉式</h3><p>　　①: 这是 最简单的单例实现方式<br>　　②: 原理: 依赖 JVM类加载机制，保证单例只会被创建1次，即 线程安全<br>　　　　　　JVM在类的初始化阶段(即 在Class被加载后、被线程使用前)，会执行类的初始化<br>　　　　　　在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化<br>　　③: 应用场景: 除了初始化单例类时 即 创建单例外，继续延伸出来的是：单例对象 要求初始化速度快 &amp; 占用内存小<br>　　④: 具体实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">　　　　　　　<span class="comment">// 1. 加载该类时，单例就会自动被创建</span></span><br><span class="line">              <span class="keyword">private</span> <span class="keyword">static</span>  Singleton ourInstance  = <span class="keyword">new</span>  Singleton();</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 2. 构造函数 设置为 私有权限</span></span><br><span class="line">              <span class="comment">// 原因：禁止他人创建实例</span></span><br><span class="line">              <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 3. 通过调用静态方法获得创建的单例</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> ourInstance;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-实现方式2-枚举类型"><a href="#9-2-实现方式2-枚举类型" class="headerlink" title="9.2 实现方式2: 枚举类型"></a>9.2 实现方式2: 枚举类型</h3><p>　　①: 原理: 根据枚举类型的下述特点，满足单例模式所需的 创建单例、线程安全、实现简洁的需求<br>　　②: 具体实现:      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">   <span class="comment">//定义1个枚举的元素，即为单例类的1个实例</span></span><br><span class="line">   INSTANCE;                  </span><br><span class="line">    <span class="comment">// 隐藏了1个空的、私有的 构造方法</span></span><br><span class="line">    <span class="comment">// private Singleton () &#123;&#125;</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 获取单例的方式：</span></span><br><span class="line">       Singleton singleton = Singleton.INSTANCE;</span><br><span class="line">注：这是 最简洁、易用 的单例实现方式，借用《Effective Java》的话：</span><br><span class="line">单元素的枚举类型已经成为实现 Singleton的最佳方法</span><br></pre></td></tr></table></figure><h3 id="9-3实现方式3-懒汉式（基础实现）"><a href="#9-3实现方式3-懒汉式（基础实现）" class="headerlink" title="9.3实现方式3: 懒汉式（基础实现）"></a>9.3实现方式3: 懒汉式（基础实现）</h3><p>　　①: 原理: 与饿汉式 最大的区别是：单例创建的时机<br>　　　　　　饿汉式：单例创建时机不可控，即类加载时 自动创建 单例<br>　　　　　　懒汉式：单例创建时机可控，即有需要时，才 手动创建 单例<br>　　②: 具体实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// 1. 类加载时，先不自动创建单例</span></span><br><span class="line">                  <span class="comment">//  即，将单例的引用先赋值为 Null</span></span><br><span class="line">                      <span class="keyword">private</span> <span class="keyword">static</span>  Singleton ourInstance  = <span class="keyword">null</span>；  </span><br><span class="line">                  <span class="comment">// 2. 构造函数 设置为 私有权限</span></span><br><span class="line">                  <span class="comment">// 原因：禁止他人创建实例</span></span><br><span class="line">                  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">// 3. 需要时才手动调用 newInstance（） 创建 单例</span></span><br><span class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// 先判断单例是否为空，以避免重复创建</span></span><br><span class="line">                  <span class="keyword">if</span>( ourInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                      ourInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">return</span> ourInstance;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><p>　　③: 缺点: 基础实现的懒汉式是线程不安全的，具体原因如下:<br>　　　　　　可能存在多个线程并发 调用 newInstance ( ),从而重复创建单例对象</p><p>　　④:具体实例: 一个线程A执行到singleton=new Singleton( ); 但还没有获得对象(因对象初始化需要时间),此时,第2个线程也在执行,执行到if (singleton == null) 判断 (判断为真,于是继续运行,创建单例对象),最终线程A ,B 同时获得了一个单例对象, 在内存中就出现两个单例类的对象,造成单例模式失效.</p><h3 id="9-4实现方式4-懒汉式的改进—-gt-同步锁"><a href="#9-4实现方式4-懒汉式的改进—-gt-同步锁" class="headerlink" title="9.4实现方式4: 懒汉式的改进—&gt;同步锁"></a>9.4实现方式4: 懒汉式的改进—&gt;同步锁</h3><p>　　①: 原理: 使用同步锁 synchronized锁住创建单例的方法 ，防止多个线程同时调用，从而避免造成单例被多次创建　即，getInstance（）方法块只能运行在1个线程中．若该段代码已在1个线程中运行，另外1个线程试图运行该块代码，则 会被阻塞而一直等待，而在这个线程安全的方法里我们实现了单例的创建，保证了多线程模式下单例对象的唯一性．<br>　　②: 具体实现:           </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 写法1(同步方法)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">               　 <span class="comment">// 1. 类加载时，先不自动创建单例</span></span><br><span class="line">               　<span class="comment">//  即，将单例的引用先赋值为 Null</span></span><br><span class="line">                 <span class="keyword">private</span> <span class="keyword">static</span>  Singleton ourInstance  = <span class="keyword">null</span>；            </span><br><span class="line">                 <span class="comment">// 2. 构造函数 设置为 私有权限</span></span><br><span class="line">                  <span class="comment">// 原因：禁止他人创建实例</span></span><br><span class="line">                  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 3. 加入同步锁</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">                      <span class="comment">// 先判断单例是否为空，以避免重复创建</span></span><br><span class="line">                      <span class="keyword">if</span> ( ourInstance == <span class="keyword">null</span> )</span><br><span class="line">                          ourInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                      <span class="keyword">return</span> ourInstance;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 写法2 (同步代码块)</span></span><br><span class="line">               <span class="comment">// 该写法的作用与上述写法作用相同，只是写法有所区别</span></span><br><span class="line">               <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                   <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">                       <span class="comment">// 加入同步锁</span></span><br><span class="line">                       <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                           <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">                               instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">return</span> instance;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><p>　　④: 缺点: 每次访问都要进行线程同步（即 调用synchronized锁)，造成过多的同步开销（加锁 = 耗时、耗能）<br>　　注: 实际上只需在第1次调用该方法时才需要同步，一旦单例创建成功后，就没必要进行同步</p><h3 id="9-5-实现方式5-懒汉式的改进—-gt-双重检验锁"><a href="#9-5-实现方式5-懒汉式的改进—-gt-双重检验锁" class="headerlink" title="9.5 实现方式5: 懒汉式的改进—&gt;双重检验锁"></a>9.5 实现方式5: 懒汉式的改进—&gt;双重检验锁</h3><p>　　①: 原理: 在同步锁的基础上，添加1层 if判断：若单例已创建，则不需再执行加锁操作就可获取实例，从而提高性能<br>　　②: 具体实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span>  Singleton ourInstance  = <span class="keyword">null</span>；</span><br><span class="line">               <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="comment">// 加入双重校验锁</span></span><br><span class="line">                  <span class="comment">// 校验锁1：第1个if</span></span><br><span class="line">                  <span class="keyword">if</span>( ourInstance == <span class="keyword">null</span>)&#123;  <span class="comment">// ①</span></span><br><span class="line">                   <span class="keyword">synchronized</span> (Singleton.class)&#123; <span class="comment">// ②</span></span><br><span class="line">                    <span class="comment">// 校验锁2：第2个 if</span></span><br><span class="line">                    <span class="keyword">if</span>( ourInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        ourInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                      <span class="keyword">return</span> ourInstance;</span><br><span class="line">                 &#125;</span><br><span class="line">              &#125;</span><br><span class="line">           <span class="comment">// 说明</span></span><br><span class="line">           <span class="comment">// 校验锁1：第1个if</span></span><br><span class="line">           <span class="comment">// 作用：若单例已创建，则直接返回已创建的单例，无需再执行加锁操作</span></span><br><span class="line">           <span class="comment">// 即直接跳到执行 return ourInstance</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 校验锁2：第2个 if</span></span><br><span class="line">           <span class="comment">// 作用：防止多次创建单例问题</span></span><br><span class="line">           <span class="comment">// 原理</span></span><br><span class="line">             <span class="comment">// 1. 线程A调用newInstance()方法，当运行到②位置时，此时线程B也调用了newInstance()方法,</span></span><br><span class="line">             <span class="comment">// 2. 因线程A并没有执行instance = new Singleton();，此时instance仍为空，因此线程B能突破第1层 if 判断，运行到①位置等待synchronized中的A线程执行完毕</span></span><br><span class="line">             <span class="comment">// 3. 当线程A释放同步锁时，单例已创建，即instance已非空</span></span><br><span class="line">             <span class="comment">// 4. 此时线程B 从①开始执行到位置②。此时第2层 if 判断 为非空（单例已创建），因此也不会创建多余的实例</span></span><br><span class="line">     ③: 缺点: 实现复杂 = 多种判断，易出错</span><br></pre></td></tr></table></figure><h3 id="9-6-实现方式6-静态内部类"><a href="#9-6-实现方式6-静态内部类" class="headerlink" title="9.6 实现方式6: 静态内部类"></a>9.6 实现方式6: 静态内部类</h3><p>　　①: 原理: 根据 静态内部类 的特性，同时解决了按需加载、线程安全的问题，同时实现简洁<br>　　　　　　在静态内部类里创建单例，在装载该内部类时才会去创建单例<br>　　　　　　线程安全：类是由 JVM加载，而JVM只会加载1遍，保证只有1个单例<br>　　②: 具体实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">           <span class="comment">// 1. 创建静态内部类</span></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">               <span class="comment">// 在静态内部类里创建单例</span></span><br><span class="line">              <span class="keyword">private</span> <span class="keyword">static</span>  Singleton ourInstance  = <span class="keyword">new</span> Singleton()；</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 私有构造函数</span></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 延迟加载、按需创建</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Singleton2.ourInstance;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用过程说明：</span></span><br><span class="line">              <span class="comment">// 1. 外部调用类的newInstance()</span></span><br><span class="line">              <span class="comment">// 2. 自动调用Singleton2.ourInstance</span></span><br><span class="line">               <span class="comment">// 2.1 此时单例类Singleton2得到初始化</span></span><br><span class="line">               <span class="comment">// 2.2 而该类在装载 &amp; 被初始化时，会初始化它的静态域，从而创建单例；</span></span><br><span class="line">               <span class="comment">// 2.3 由于是静态域，因此只会JVM只会加载1遍，Java虚拟机保证了线程安全性</span></span><br><span class="line">              <span class="comment">// 3. 最终只创建1个单例</span></span><br></pre></td></tr></table></figure><p>参考文章:<br><a href="https://www.jianshu.com/p/b8c578b07fbc" target="_blank" rel="noopener">https://www.jianshu.com/p/b8c578b07fbc</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;769px&quot; height=&quot;369px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/DesignPatterns-2.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://zzwwqq.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式之单例模式" scheme="https://zzwwqq.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>初识设计模式</title>
    <link href="https://zzwwqq.xyz/%E5%88%9D%E8%AF%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://zzwwqq.xyz/初识设计模式.html</id>
    <published>2019-03-25T02:30:32.000Z</published>
    <updated>2019-03-25T04:45:09.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>　　我们学习程序设计语言，有必要学习它的设计模式吗？当然是有必要的，程序里有一些“模式”可以发掘的。因为你可以借鉴以往的经验，避免走很多弯路，更快的构造新的程序，提高开发效率。</p><h2 id="一、设计模式是什么？"><a href="#一、设计模式是什么？" class="headerlink" title="一、设计模式是什么？"></a>一、设计模式是什么？</h2><p>　　设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><p>　　简言之：<strong>模式：在某些场景下，针对某类问题的某种通用的解决方案。</strong></p><h2 id="二、设计模式历史背景"><a href="#二、设计模式历史背景" class="headerlink" title="二、设计模式历史背景?"></a>二、设计模式历史背景?</h2><p>　　埃里希·伽玛（Erich Gamma）, Richard Helm, Ralph Johnson，John Vlissides，后以“四人帮”（Gang of Four，GoF）著称，简称 GoF ，在 95年的时候整理归纳出 23 种最常用的设计模式，并编写成一本书 <strong>Design Patterns: Elements of Reusable Object-Oriented Software</strong> 就是：《设计模式：可复用面向对象软件的基础》 。</p><h2 id="三、设计模式的六大原则"><a href="#三、设计模式的六大原则" class="headerlink" title="三、设计模式的六大原则:"></a><strong>三、设计模式的六大原则:</strong></h2><p><strong>开闭原则（Open Close Principle)</strong>：模块应尽量在不修改原代码(闭)的情况下进行扩展(开)。即在程序需要进行拓展的时候，不能去修改原有的代码（闭），实现一个热插拔的效果。</p><p><strong>里氏替换原则（Liskov Substitution Principle）</strong>：如果调用的是父类的话，那么换成子类也完全可以运行。 派生类能够在基类的基础上增加新的行为。只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><p><strong>依赖倒置原则（Dependence Inversion Principle）</strong>：高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。2、抽象不应该依赖于具体实现，具体实现应该依赖于抽象。要求对抽象/接口进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><p><strong>接口隔离原则  (Interface Segregation Principle)</strong>：每一个接口应该是一种角色，不干不该干的事，该干的事都要干。降低类之间的耦合度。</p><p><strong>合成复用原则  (Composite Reuse Principle)</strong>：要尽量使用组合/ 聚合，尽量不要使用继承。只有“Is - A” 关系才符合继承关系，“Has- A” 关系应当使用聚合来描述。</p><p><strong>迪米特法则  (Demeter Principle)</strong>（也称最少知识原则）：一个对象应对其它对象有尽可能少的了解。即一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。简言之：只与直接的朋友通信</p><h2 id="四、设计模式的三大分类"><a href="#四、设计模式的三大分类" class="headerlink" title="四、设计模式的三大分类:"></a>四、设计模式的三大分类:</h2><p><strong>创建型模式：共5种,   对象实例化的模式，创建型模式用于解耦对象的实例化过程。</strong></p><p><strong>结构型模式：共7种,  把类或对象结合在一起形成一个更大的结构。</strong></p><p><strong>行为型模式：共11种,   类和对象如何交互，及划分责任和算法。</strong></p><h2 id="五、23种设计模式"><a href="#五、23种设计模式" class="headerlink" title="五、23种设计模式:"></a>五、23种设计模式:</h2><p>单例模式：某个类只能有一个实例，提供一个全局的访问点。</p><p>工厂方法(<strong>Factory Method</strong>)：定义一个创建对象的接口，让子类决定实例化那个类。</p><p>　　　　　简单工厂：一个工厂类根据传入的参量决定创建出那一种产品类的实例。</p><p>　　　　　普通工厂模式：就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。</p><p>　　　　　多个工厂方法模式：是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象</p><p>　　　　　静态工厂方法模式：将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可</p><p>抽象工厂：创建相关或依赖对象的家族，而无需明确指定具体类。</p><p>建造者模式：封装一个复杂对象的构建过程，并可以按步骤构造。</p><p>原型模式：通过复制现有的实例来创建新的实例。</p><p>适配器模式：将一个类的方法接口转换成客户希望的另外一个接口。</p><p>组合模式：将对象组合成树形结构以表示“”部分-整体“”的层次结构。</p><p>装饰模式：动态的给对象添加新的功能。</p><p>代理模式：为其他对象提供一个代理以便控制这个对象的访问。</p><p>享元模式：通过共享技术来有效的支持大量细粒度的对象。</p><p>外观模式：对外提供一个统一的方法，来访问子系统中的一群接口。</p><p>桥接模式：将抽象部分和它的实现部分分离，使它们都可以独立的变化。</p><p>模板模式：定义一个算法结构，而将一些步骤延迟到子类实现。</p><p>解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器。</p><p>策略模式：定义一系列算法，把他们封装起来，并且使它们可以相互替换。</p><p>状态模式：允许一个对象在其对象内部状态改变时改变它的行为。</p><p>观察者模式：对象间的一对多的依赖关系。</p><p>备忘录模式：在不破坏封装的前提下，保持对象的内部状态。</p><p>中介者模式：用一个中介对象来封装一系列的对象交互。</p><p>命令模式：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。</p><p>访问者模式：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。</p><p>责任链模式：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。</p><p>迭代器模式：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。</p><p>参考文章: </p><p><a href="https://zhuanlan.zhihu.com/p/28737945" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28737945</a><br><a href="https://www.cnblogs.com/pony1223/p/7608955.html" target="_blank" rel="noopener">https://www.cnblogs.com/pony1223/p/7608955.html</a><br><a href="https://juejin.im/post/59b78dfe5188257e7e115cae" target="_blank" rel="noopener">https://juejin.im/post/59b78dfe5188257e7e115cae</a><br><a href="https://www.jianshu.com/p/72764b69d6cf" target="_blank" rel="noopener">https://www.jianshu.com/p/72764b69d6cf</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;769px&quot; height=&quot;369px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/DesignPatterns-1.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://zzwwqq.xyz/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式开篇" scheme="https://zzwwqq.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BC%80%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>子网划分的经典实例</title>
    <link href="https://zzwwqq.xyz/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B.html"/>
    <id>https://zzwwqq.xyz/子网划分的两个经典实例.html</id>
    <published>2019-03-24T02:07:24.000Z</published>
    <updated>2019-03-24T02:46:05.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h2><p>例1:<br>一家集团公司有12家子公司，每家子公司又有4个部门。上级给出一个172.16.0.0/16的网段，让给每家子公司以及子公司的部门分配网段。</p><p>例2:<br>某集团公司给下属子公司甲分配了一段IP地址192.168.5.0/24，现在甲公司有两层办公楼（1楼和2楼），统一从1楼的路由器上公网。1楼有100台电脑联网，2楼有53台电脑联网。如果你是该公司的网管，你该怎么去规划这个IP？</p><p>例3:<br>请问 192.168.10.0/26  有多少子网?每个子网有多少主机?有多少合法子网?每个子网的广播地址是多少?哪些是合法主机号?</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h2><p>例1：通过子网数来划分子网，未考虑主机数。</p><p>例2：通过计算主机数来划分子网。</p><h3 id="例1-思路："><a href="#例1-思路：" class="headerlink" title="例1 思路："></a>例1 思路：</h3><p>既然有12家子公司，那么就要划分12个子网段，但是每家子公司又有4个部门，因此又要在每家子公司所属的网段中划分4个子网分配给各部门。</p><h3 id="例1步骤："><a href="#例1步骤：" class="headerlink" title="例1步骤："></a>例1步骤：</h3><p>A. 先划分各子公司的所属网段。</p><p>有12家子公司，那么就有2的n次方≥12，n的最小值=4。因此，网络位需要向主机位借4位。那么就可以从172.16.0.0/16这个大网段中划出2的4次方=16个子网。</p><p>详细过程：</p><p>先将172.16.0.0/16用二进制表示</p><p>10101100.00010000.00000000.00000000/16</p><p>借4位后（可划分出16个子网）：</p><p>1)   10101100.  00010000  . 00000000.00000000/20【172.16.0.0/20】</p><p>2)   10101100.00010000.00010000.00000000/20【172.16.16.0/20】</p><p>3)   10101100.00010000.00100000.00000000/20【172.16.32.0/20】</p><p>4)   10101100.00010000.00110000.00000000/20【172.16.48.0/20】</p><p>5)   10101100.00010000.01000000.00000000/20【172.16.64.0/20】</p><p>6)   10101100.00010000.01010000.00000000/20【172.16.80.0/20】</p><p>7)   10101100.00010000.01100000.00000000/20【172.16.96.0/20】</p><p>8)   10101100.00010000.01110000.00000000/20【172.16.112.0/20】</p><p>9)   10101100.00010000.10000000.00000000/20【172.16.128.0/20】</p><p>10) 10101100.00010000.10010000.00000000/20【172.16.144.0/20】</p><p>11) 10101100.00010000.10100000.00000000/20【172.16.160.0/20】</p><p>12) 10101100.00010000.10110000.00000000/20【172.16.176.0/20】</p><p>13) 10101100.00010000.11000000.00000000/20【172.16.192.0/20】</p><p>14) 10101100.00010000.11010000.00000000/20【172.16.208.0/20】</p><p>15) 10101100.00010000.11100000.00000000/20【172.16.224.0/20】</p><p>16) 10101100.00010000.11110000.00000000/20【172.16.240.0/20】</p><p>我们从这16个子网中选择12个即可，就将前12个分给下面的各子公司。每个子公司最多容纳主机数目为2的12次方-2=4094。</p><p>B. 再划分子公司各部门的所属网段</p><p>以甲公司获得172.16.0.0/20为例，其他子公司的部门网段划分同甲公司。</p><p>有4个部门，那么就有2的n次方≥4，n的最小值=2。因此，网络位需要向主机位借2位。那么就可以从172.16.0.0/20这个网段中再划出2的2次方=4个子网，正符合要求。</p><p>详细过程：</p><p>先将172.16.0.0/20用二进制表示</p><p>\10101100.   00010000.   00000000.00000000/20</p><p>借2位后（可划分出4个子网）：</p><p>① 10101100.00010000.00000000.00000000/22【172.16.0.0/22】</p><p>② 10101100.00010000.00000100.00000000/22【172.16.4.0/22】</p><p>③ 10101100.00010000.00001000.00000000/22【172.16.8.0/22】</p><p>④ 10101100.00010000.00001100.00000000/22【172.16.12.0/22】</p><p>将这4个网段分给甲公司的4个部门即可。每个部门最多容纳主机数目为2的10次方-2=1024</p><h3 id="例2思路"><a href="#例2思路" class="headerlink" title="例2思路:"></a>例2思路:</h3><p>我们在划分子网时优先考虑最大主机数来划分。<br>在本例中，我们就先使用最大主机数来划分子网。101个可用IP地址，那就要保证至少7位的主机位可用（2的m次方-2≥101，m的最小值=7）。如果保留7位主机位，那就只能划出两个网段，剩下的一个网段就划不出来了。但是我们剩下的一个网段只需要2个IP地址并且2楼的网段只需要54个可用IP，因此，我们可以从第一次划出的两个网段中选择一个网段来继续划分2楼的网段和路由器互联使用的网段。</p><h3 id="例2-步骤："><a href="#例2-步骤：" class="headerlink" title="例2 步骤："></a>例2 步骤：</h3><p>根据需求，画出下面这个简单的拓扑。将192.168.5.0/24划成3个网段，1楼一个网段，至少拥有101个可用IP地址；2楼一个网段，至少拥有54个可用IP地址；1楼和2楼的路由器互联用一个网段，需要2个IP地址。</p><p><img src="http://cdn.zzwwqq.xyz/static/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91-2.2.jpg" alt></p><h3 id="A-先根据大的主机数需求，划分子网"><a href="#A-先根据大的主机数需求，划分子网" class="headerlink" title="A. 先根据大的主机数需求，划分子网"></a>A. 先根据大的主机数需求，划分子网</h3><p>因为要保证1楼网段至少有101个可用IP地址，所以，主机位要保留至少7位。</p><p>先将192.168.5.0/24用二进制表示：</p><p>11000000.10101000.00000101.00000000/24</p><p>主机位保留7位，即在现有基础上网络位向主机位借1位（可划分出2个子网）：</p><p>① 11000000.10101000.00000101.00000000/25【192.168.5.0/25】</p><p>② 11000000.10101000.00000101.10000000/25【192.168.5.128/25】</p><p>1楼网段从这两个子网段中选择一个即可，我们选择192.168.5.0/25。</p><p>2楼网段和路由器互联使用的网段从192.168.5.128/25中再次划分得到。 </p><h3 id="B-再划分2楼使用的网段"><a href="#B-再划分2楼使用的网段" class="headerlink" title="B. 再划分2楼使用的网段"></a>B. 再划分2楼使用的网段</h3><p>2楼使用的网段从192.168.5.128/25这个子网段中再次划分子网获得。因为2楼至少要有54个可用IP地址，所以，主机位至少要保留6位（2的m次方-2≥54，m的最小值=6）。</p><p>先将192.168.5.128/25用二进制表示：</p><p>11000000.10101000.00000101.10000000/25</p><p>主机位保留6位，即在现有基础上网络位向主机位借1位（可划分出2个子网）：</p><p>① 11000000.10101000.00000101.10000000/26【192.168.5.128/26】</p><p>② 11000000.10101000.00000101.11000000/26【192.168.5.192/26】</p><p>2楼网段从这两个子网段中选择一个即可，我们选择192.168.5.128/26。</p><p>路由器互联使用的网段从192.168.5.192/26中再次划分得到。</p><h3 id="C-最后划分路由器互联使用的网段"><a href="#C-最后划分路由器互联使用的网段" class="headerlink" title="C. 最后划分路由器互联使用的网段"></a>C. 最后划分路由器互联使用的网段</h3><p>路由器互联使用的网段从192.168.5.192/26这个子网段中再次划分子网获得。因为只需要2个可用IP地址，所以，主机位只要保留2位即可（2的m次方-2≥2，m的最小值=2）。</p><p>先将192.168.5.192/26用二进制表示：</p><p>11000000.10101000.00000101.11000000/26</p><p>主机位保留2位，即在现有基础上网络位向主机位借4位（可划分出16个子网）：</p><p>① 11000000.10101000.00000101.11000000/30【192.168.5.192/30】</p><p>② 11000000.10101000.00000101.11000100/30【192.168.5.196/30】</p><p>③ 11000000.10101000.00000101.11001000/30【192.168.5.200/30】</p><p>…………………………………</p><p>④ 11000000.10101000.00000101.11110100/30【192.168.5.244/30】</p><p>⑤ 11000000.10101000.00000101.11111000/30【192.168.5.248/30】</p><p>⑥ 11000000.10101000.00000101.11111100/30【192.168.5.252/30】</p><p>路由器互联网段我们从这16个子网中选择一个即可，我们就选择192.168.5.252/30。</p><h3 id="D-整理本例的规划地址"><a href="#D-整理本例的规划地址" class="headerlink" title="D.  整理本例的规划地址"></a>D.  整理本例的规划地址</h3><h3 id="1楼："><a href="#1楼：" class="headerlink" title="1楼："></a>1楼：</h3><p>网络地址：【192.168.5.0/25】       </p><p>最小地址为11000000  10101000  00000101  00000000 即 192.168.5.0</p><p>最大地址为11000000  10101000  00000101  01111111 即 192.168.5.127</p><p>主机位全0全1的不能作为主机IP，因为主机位全1 的要用来作 广播地址即192.168.5.127</p><p>剩下的可以分配作为主机的IP</p><p>主机IP地址：【192.168.5.1/25—192.168.5.126/25】</p><p>广播地址：【192.168.5.127/25】</p><h3 id="2楼："><a href="#2楼：" class="headerlink" title="2楼："></a>2楼：</h3><p>网络地址：【192.168.5.128/26】</p><p>主机IP地址：【192.168.5.129/26—192.168.5.190/26】</p><p>广播地址：【192.168.5.191/26】</p><p>路由器互联：</p><p>网络地址：【192.168.5.252/30】</p><p>两个IP地址：【192.168.5.253/30、192.168.5.254/30】</p><p>广播地址：【192.168.5.255/30】</p><h3 id="快速划分子网确定IP-以例2为例："><a href="#快速划分子网确定IP-以例2为例：" class="headerlink" title="快速划分子网确定IP:  以例2为例："></a>快速划分子网确定IP:  以例2为例：</h3><p>题目需要我们将192.168.5.0/24这个网络地址划分成能容纳101/54/2个主机的子网。因此我们要先确定主机位，然后根据主机位决定网络位，最后确定详细的IP地址。</p><p>① 确定主机位</p><p>将所需要的主机数自大而小的排列出来：101/54/2，然后根据网络拥有的IP数目确定每个子网的主机位：如果2的n次方-2≥该网段的IP数目，那么主机位就等于n。于是，得到：7/6/2。</p><p>② 根据主机位决定网络位</p><p>用32减去主机位剩下的数值就是网络位，得到：25/26/30。</p><p>③ 确定详细的IP地址</p><p>在二进制中用网络位数值掩盖IP前面相应的位数，然后后面的为IP位。选取每个子网的第一个IP为网络地址，最后一个为广播地址，之间的为有效IP。得到：</p><p>【网络地址】 【有效IP】 【广播地址】</p><p>【192.168.5.0/25】【192.168.5.1/25-192.168.5.126/25】【192.168.5.127/25】</p><p>【192.168.5.128/26】【192.168.5.129/26-192.168.5.190/26】【192.168.5.191/26】</p><p>【192.168.5.192/30】【192.168.5.193/30-192.168.5.194/30】【192.168.5.195/30】</p><h3 id="例3-分析"><a href="#例3-分析" class="headerlink" title="例3: 分析"></a>例3: 分析</h3><p>首先就是要理解/26的意思。<br>首先一看就是个C类地址，所以其默认子网掩码是255.255.255.0。这个子网掩码是由3个.来分隔的，而且这是10进制表示出来的，把它化为2进制=11111111.11111111.11111111.00000000前面是24个1。所以默认的C类子网掩码被写成/24。</p><p>这道题是/26，也就是有26个1，写出来就是11111111.11111111.11111111.11000000。把它划成10进制就是255.255.255.192, 现在知道了子网掩码就可以回答那5个问题了</p><p>1.有多少个子网？</p><p>这有个公式的。子网数目=2的X次方，这里的X是指掩码位数，掩码为数可以用我们现在的子网掩码的1的为数减去默认的1的位数。这道题有子网掩码有26个1，而C类默认有24个1，所以就是26-24=2。子网数=2的2次方=4</p><p>2.每个子网的主机数？</p><p>这还是由公式的。子网主机数=2的Y次方-2，这里的Y是非掩码位的位数，即子网掩码中0的个数，刚才已经知道有26个1了，那剩下的就都是0了，一共有32位，现在有26个1剩下的就只有6个0。所以子网主机数=2的6次方-2=62</p><p>3.哪些是合法子网？</p><p>这里牵扯了块这个概念，块=256 - 子网掩码。这里就是 - 192 ，所以这道题块=64 ，知道了块就把块从0开始加，一直加到256，这之间的数就是合法子网。0+64=64 64+64=128 128+62=192 192+64=256 所以合法子网就是0 64 128 192</p><p>4.每个子网的广播地址是多少？</p><p>广播地址=下一个子网号-1</p><p>所以0子网的广播地址是63；64子网的广播地址是127；128子网的广播地址是191；192子网的广播地址是255</p><p>5.哪些是合法主机号？</p><p>合法主机号是那些介于个子网之间的取值，并要减去全0和全1的主机号，例如：64是子网号码，127是广播地址，那么65–126就是合法地址。</p><p>所以0子网的合法地址是1–62；64子网的合法地址是65–126；128子网的合法地址是129==190；192子网的合法地址是193–254</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>子网划分无非涉及到这些内容: </p><p>1.有多少子网</p><p>2.每个子网有多少主机</p><p>3.有多少合法子网</p><p>4.每个子网的广播地址是多少:    广播地址下一个子网号-1</p><p>5.哪些是合法主机号</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;768px&quot; height=&quot;367px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91-2.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="https://zzwwqq.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="子网划分实例" scheme="https://zzwwqq.xyz/tags/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>初识计算机网络</title>
    <link href="https://zzwwqq.xyz/%E5%88%9D%E8%AF%86%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.html"/>
    <id>https://zzwwqq.xyz/初识计算机网络.html</id>
    <published>2019-03-24T00:59:46.000Z</published>
    <updated>2019-03-24T02:04:19.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>　　计算机网络可以说是连通世界的桥梁，推动发展的催化剂，正是计算机网络技术让信息传播速度更快，让我们能随时随地在线看视频、听音乐、查资料、看新闻、分享资源,试想一下如果没有计算机网络这门学科，我们的世界还会有今天这么繁荣吗？</p><h2 id="计算机网络是什么？"><a href="#计算机网络是什么？" class="headerlink" title="计算机网络是什么？"></a>计算机网络是什么？</h2><p>　　计算机网络技术是通信技术与计算机技术相结合的产物。计算机网络是按照网络协议，将地球上分散的、独立的计算机相互连接的集合。连接介质可以是电缆、双绞线、光纤、微波、载波或通信卫星。计算机网络具有共享硬件、软件和数据资源的功能，具有对共享数据资源集中处理及管理和维护的能力．</p><h2 id="发展历史："><a href="#发展历史：" class="headerlink" title="发展历史："></a>发展历史：</h2><p>其发展经历了四个阶段:</p><p>①:20世纪50~60年代，出现以单个计算机为中心的远程连机系统，构成面向终端的计算机网络；</p><p>②:20世纪60~70年代，出现了多个主计算机通过通信线路互连的计算机网络。ARPANET投入使用；</p><p>③:20世纪70~80年代，出现具有统一的网络体系结构，遵循国际标准化协议的计算机网络。</p><p>④:从90年代算起，网络互联与高速网络。</p><p>我国在1980年开始进行计算机联网实验，1989年，我国第一个分组交换网CNPAC建成运行.</p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>①: 连通性</p><p>②: 共享</p><h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><h3 id="按作用范围分类"><a href="#按作用范围分类" class="headerlink" title="按作用范围分类:"></a>按作用范围分类:</h3><p>①: WAN（Wide Area Network）广域网：几十到几千KM</p><p>②: MAN（Metropolitan Area  Network）城域网：一个城市（5~50KM）</p><p>③: LAN（Local  Area  Network）局域网：1KM左右</p><p>④: PAN（Personal  Area Network）个人区域网：10m左右</p><h3 id="按传输介质分类"><a href="#按传输介质分类" class="headerlink" title="按传输介质分类:"></a>按传输介质分类:</h3><p>①: 有线网：是采用同轴电缆或双绞线连接的计算机网络。同轴电缆网是常见的一种连网方式，它比较经济，安装较为便利，传输率和抗干扰能力一般，传输距离较短。双绞线网是目前最常见的连网方式。它价格便宜，安装方便，但易受干扰，传输率较低，传输距离比同轴电缆要短。</p><p>②: 光纤网：也是有线网的一种，但由于其特殊性而单独列出。光纤网采用光导纤维作传输介质。光纤传输距离长，传输率高，可达数千兆bps，抗干扰性强，不会受到电子监听设备的监听，是高安全性网络的理想选择。但其成本较高，且需要高水平的安装技术。</p><p>③: 无线网：用电磁波作为载体来传输数据，目前无线网联网费用较高，还不太普及。但由于联网方式灵活方便，是一种很有前途的连网方式。</p><p>局域网通常采用单一的传输介质，而城域网和广域网采用多种传输介质。</p><h3 id="按通信方式分类"><a href="#按通信方式分类" class="headerlink" title="按通信方式分类:"></a>按通信方式分类:</h3><p>①: 点对点传输网络：数据以点到点的方式在计算机或通信设备中传输。星型网、环形网采用这种传输方式。</p><p>②: 广播式传输网络：数据在公用介质中传输。无线网和总线型网络属于这种类型。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用:"></a>应用:</h2><p>①: 通信服务: 如在线聊天（飞信,MSN、QQ等）、E-mail 、IP 电话等服务</p><p>②: 多媒体信息服务: 包括网上娱乐、网络电视、电视会议、WWW服务、远程教育和音乐点播等。</p><p>④: 办公自动化: 将一个单位的其它办公设备与办公用计算机连接成网络, 加强了外部和单位内部的沟通与联系，加快单位内部的信息流动，提高工作效率，并有利于减少日常开支。</p><p>⑤: 网上交易: 在线购物,转账等</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;768px&quot; height=&quot;367px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%BD%91-1.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="https://zzwwqq.xyz/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络开篇" scheme="https://zzwwqq.xyz/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%BC%80%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>git常用指令</title>
    <link href="https://zzwwqq.xyz/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html"/>
    <id>https://zzwwqq.xyz/git常用指令.html</id>
    <published>2019-03-23T06:53:25.000Z</published>
    <updated>2019-03-23T08:27:22.196Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、初始化配置"><a href="#一、初始化配置" class="headerlink" title="一、初始化配置:"></a>一、初始化配置:</h3><p>1.1　指定客户端用户名和邮箱，为了标记是谁向远程库传送数据</p><p>　　<code>$ git config --global user.name &quot;Your Name&quot;</code>                  </p><p>　　<code>$ git config --global user.email &quot;email@example.com&quot;</code></p><p>1.2查看用户名：<code>$ git config user.name</code></p><p>1.3查看邮箱：   <code>$ git config user.email</code></p><p>1.4修改用户名：<code>$ git config --global user.name &quot;cyx&quot;</code></p><p>1.5修改邮箱：    <code>$ git config --global user.email &quot;328978553@qq.com&quot;</code></p><p>1.6查看配置是否生效：      <code>$ git config --list</code></p><h3 id="二、目录文件相关"><a href="#二、目录文件相关" class="headerlink" title="二、目录文件相关:"></a>二、目录文件相关:</h3><p>2.1创建目录：　<code>$ mkdir /d/softwear/Program</code>       （“mkdir” 是“make Directory”;    “/d/softwear/”是要创建目录的位置  “Program” 是新创建的目录）</p><p>2.2定位到Program指定目录： 　<code>$ cd /d/软件/Program</code>         </p><p>2.3输出当前目录地址：　<code>$ pwd</code>                            </p><p>2.4让之前创建的目录作为git可操作的仓库，此时再去刚才创建的program目录下会发现多了一个.git目录：　<code>$ git init</code>      </p><p>2.5查看当前仓库的隐藏目录，以及文件：　<code>$ ls –ah</code>      </p><p>2.6查看当前仓库的文件：　<code>$ ls</code>          </p><h3 id="三、本地仓库关联远程库"><a href="#三、本地仓库关联远程库" class="headerlink" title="三、本地仓库关联远程库:"></a>三、本地仓库关联远程库:</h3><p>3.1关联Github远程库：<code>$ git  remote add origin git@server-name(服务器名即github用户名)/repo-name.git(远程仓库名.git)</code></p><p>如：<code>$ git remote add origin  git@zzwwqq/blog.git</code>；</p><p>3.2关联码云远程库：<code>$ git remote add origin git@gitee.com:zwqzeq/Login_Register.git</code></p><h3 id="四、操作远程仓库"><a href="#四、操作远程仓库" class="headerlink" title="四、操作远程仓库:"></a>四、操作远程仓库:</h3><p>4.1显示远程库的详细信息：　<code>$git remote -v</code>                                      </p><p>4.2本地master分支内容推送到远程库的master分支：　第一次<code>$ git push -u origin master</code>   以后 直接<code>$ git push origin  master</code>  </p><p>4.3删除远程库：　<code>$ git remote rm origin</code>     (origin远程库默认名称，建议不改)                    </p><p>4.4从远程库克隆：　<code>$ git clone git@github.com:zwqzeq/gitskills.git</code>   </p><p>4.5将本地仓库指定分支合并到远程仓库指定分支：　<code>$ git push origin  dev_branch : dev_branch</code></p><p>4.6强行让本地分支覆盖远程分支：　<code>$ git push 远程库名 远程库的分支名 -f</code>　　　</p><p>4.7将远程仓库的某个分支合并到当前本地分支：　<code>$ git pull 远程仓库名 远程仓库的分支名</code></p><h3 id="五、文件保存和提交"><a href="#五、文件保存和提交" class="headerlink" title="五、文件保存和提交:"></a>五、文件保存和提交:</h3><p>5.1将文件从工作区添加到暂存区：　<code>$ git add &lt;file&gt;</code></p><p>5.2将文件从暂存区提交到版本库：　<code>$ git commit -m “提交说明”</code>  </p><p>5.3随时查看当前仓库的状态：　<code>$ git status</code>                   </p><p>5.4查看修改了具体修改了那些内容：　<code>$ git diff &lt;file&gt;</code>               </p><h3 id="六、日志相关："><a href="#六、日志相关：" class="headerlink" title="六、日志相关："></a>六、日志相关：</h3><p>6.1查看提交历史（只有commit过的才能查到），以便确定要回退到哪个版本：　<code>$ git log</code>             </p><p> 6.2如果嫌输出信息太多，看得眼花缭乱的，可以不显示详细信息：　<code>$ git log --pretty=oneline</code> </p><p>6.3如果嫌输出信息太多，看得眼花缭乱的，可以不显示详细信息：　<code>$ git log --pretty=oneline --abbrev-commit</code></p><p>6.4查看命令历史（包括reset，commit，checkout），以便确定要回到未来的哪个版本（不包括从工作区添加（add）到暂存区的命令）：　<code>$ git reflog</code>     </p><h3 id="七、版本回退"><a href="#七、版本回退" class="headerlink" title="七、版本回退:"></a>七、版本回退:</h3><p>7.1退回到上一个版本：　<code>$ git reset --hard HEAD^</code>            //针对版本库</p><p>7.2退回到上上个版本：　<code>$ git reset --hard HEAD^^</code></p><p>7.3退回到上100个版本：　<code>$ git reset --hard HEAD~100</code> </p><p>7.4退回到指定版本：　<code>$ git reset --hard  commit_ID</code> </p><p>7.5只丢弃暂存区修改： 　<code>$ git reset HEAD &lt;file&gt;</code>      //针对暂存区，让暂存区恢复之前的状态</p><p>7.6只丢弃工作区的修改：　<code>$ git checkout --&lt;file&gt;</code>         //针对工作区，让工作区恢复之前的状态，即让工作区和暂存区一致，如果没有暂存区，则让工作区和版本库一致，如果该文件既没有添加到暂存区也没有提交到版本库，则工作区中该文件的修改不能被丢弃</p><h3 id="八、分支相关"><a href="#八、分支相关" class="headerlink" title="八、分支相关:"></a>八、分支相关:</h3><p>8.1查看分支：　<code>$ git branch</code></p><p>8.2创建分支：　<code>$ git branch &lt;name&gt;</code></p><p>8.3切换分支：　<code>$ git checkout &lt;name&gt;</code>（注意与<a href="file:///D:/QQFile/1107717335/FileRecv/Git语法.doc#_2.工作区文件被删除" target="_blank" rel="noopener">恢复文件</a>的区别，此处checkout后面没有“–”）</p><p>8.4创建+切换分支：　<code>$ git checkout -b &lt;name&gt;</code></p><p>8.5合并某分支到当前分支：　<code>$ git merge &lt;name&gt;</code></p><p>8.6删除分支：　<code>$ git branch -d &lt;name&gt;</code></p><p>8.7重命名分支：　<code>$ git branch -m old_branch new_branch</code>    </p><p>8.8看到分支合并情况：　<code>$ git log --graph --pretty=oneline --abbrev-commit</code></p><p>8.9可以禁用快速合并dev方式：　<code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p><p>8.10删除一般的分支：　<code>$ git branch -d &lt;name&gt;</code></p><p>8.11丢弃一个没有被合并过的分支，可以通过：      <code>$ git branch -D &lt;name&gt;</code>  //强行删除</p><h3 id="九、标签相关："><a href="#九、标签相关：" class="headerlink" title="九、标签相关："></a>九、标签相关：</h3><p>9.1默认标签是打在当前分支最新提交的commit上:　<code>$ git tag &lt;name&gt;</code></p><p>9.2指定一个commit id，给其打上标签，即以后标签可代表commit id:　<code>$ git tag &lt;name&gt; commit_id</code>   </p><p>9.3查看所有标签名：　<code>$ git tag</code>            </p><p>9.4查看标签信息：　<code>$ git show &lt;tagname&gt;</code></p><p>9.5指定标签信息：　<code>$ git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot; commit_ID</code></p><p>9.6删除本地标签：　<code>$ git tag -d v0.1</code> </p><p>9.7推送某个标签到远程（origin      是默认的远程库名，也可换成自定义的名字）：　<code>$ git push origin &lt;tagname&gt;</code>                  </p><p>9.8推送所有标签到远程（origin 是默认的远程库名，也可换成自定义的名字）：　 <code>$ git push origin --tags</code>     </p><p>9.9删除远程标签：如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除，然后，从远程删除：     </p><p>　　<code>$ git tag -d v0.9</code> </p><p>　　<code>$ git push origin :refs/tags/v0.9</code></p><h3 id="十、临时保存工作现场："><a href="#十、临时保存工作现场：" class="headerlink" title="十、临时保存工作现场："></a>十、临时保存工作现场：</h3><p>10.1前工作现场“储藏（或称隐藏）”起来，等以后恢复现场后继续工作：　<code>$ git stash</code> </p><p>10.2查看某个分支上隐藏工作区：　<code>$ git stash list</code>　</p><p>10.3恢复工作现场：两种方式：</p><p>　　　　　方式一：用<code>$ git stash apply</code>恢复,但是恢复后,stash内容并不删除,你需要用<code>$ git stash drop</code>来删除；</p><p>　　　　　方式二：用<code>$ git stash pop</code>,恢复的同时把stash内容也删了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;768px&quot; height=&quot;367px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/git/git-1.2.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://zzwwqq.xyz/categories/Git/"/>
    
    
      <category term="Git指令" scheme="https://zzwwqq.xyz/tags/Git%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>初识Git</title>
    <link href="https://zzwwqq.xyz/%E5%88%9D%E8%AF%86Git.html"/>
    <id>https://zzwwqq.xyz/初识Git.html</id>
    <published>2019-03-23T05:40:15.000Z</published>
    <updated>2019-03-23T08:29:52.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>　　你是否有这样的经历：写word文档时,想删除一部分内容，又怕将来想恢复找不回来怎么办？常见办法就是先把当前文件“另存为”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件.改到最后你自己都分不清,哪个文件里面是修改了什么. 如果有，那么恭喜你，以后不会再有这种事情发生了，git能帮你管理文件.</p><h2 id="git是什么"><a href="#git是什么" class="headerlink" title="git是什么?"></a>git是什么?</h2><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）.</p><h2 id="GIT的历史背景"><a href="#GIT的历史背景" class="headerlink" title="GIT的历史背景:"></a>GIT的历史背景:</h2><p>　　很多人都知道，Linus（李纳斯）在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。直到2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>　　安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。<br>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！</p><p>　　Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。<br>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h2 id="分布式的git和集中式的CVS-SVN对比"><a href="#分布式的git和集中式的CVS-SVN对比" class="headerlink" title="分布式的git和集中式的CVS/SVN对比:"></a>分布式的git和集中式的CVS/SVN对比:</h2><h2 id="联网："><a href="#联网：" class="headerlink" title="联网："></a>联网：</h2><p>　　集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。集中式版本控制系统最大的毛病就是必须联网才能工作．<br>　　分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。</p><h2 id="安全性："><a href="#安全性：" class="headerlink" title="安全性："></a>安全性：</h2><p>　　和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><h2 id="如何安装？"><a href="#如何安装？" class="headerlink" title="如何安装？"></a>如何安装？</h2><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载安装程序</a>，然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，(或者鼠标右键,可以找到git Bash)蹦出一个类似命令行窗口的东西，就说明Git安装成功.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;768px&quot; height=&quot;367px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/git/git-1.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://zzwwqq.xyz/categories/Git/"/>
    
    
      <category term="初识Git" scheme="https://zzwwqq.xyz/tags/%E5%88%9D%E8%AF%86Git/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="https://zzwwqq.xyz/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://zzwwqq.xyz/hexo常用命令.html</id>
    <published>2019-03-23T03:29:10.000Z</published>
    <updated>2019-03-23T06:49:12.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>​    为了方便查阅,这里将常用指令汇总.</p><h2 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令:"></a>简写指令:</h2><p><code>hexo n &quot;我的博客&quot;</code>       等价于        <code>hexo new &quot;我的博客&quot;</code>  还等价于       <code>hexo new post &quot;我的博客&quot;</code>      #新建一篇文章<br><code>hexo p</code> 等价于 <code>hexo publish</code><br><code>hexo g</code> 等价于 <code>hexo generate</code><br><code>hexo s</code>等价于 <code>hexo server</code><br><code>hexo d</code> 等价于 <code>hexo deploy</code><br><code>hexo deploy -g</code>  等价于 <code>hexo deploy --generate</code><br><code>hexo generate -d</code>等价于<code>hexo generate --deploy</code></p><p><strong>注: hexo  clean 没有 简写,  git –version 没有简写</strong></p><h2 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明:"></a>指令说明:</h2><p><code>hexo server</code>        #Hexo 会监视文件变动并自动更新，除修改<strong>站点配置文件</strong>外,无须重启服务器,直接刷新网页即可生效。<br><code>hexo server -s</code> #以静态模式启动<br><code>hexo server -p 5000</code> #更改访问端口   (默认端口为4000，’ctrl + c’关闭server)<br><code>hexo server -i 192.168.1.1</code> #自定义 IP<br><code>hexo clean</code> #清除缓存  ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹<br><code>hexo g</code> #生成静态网页  (执行 <code>$ hexo  g</code>后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“   下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “   路径下)<br><code>hexo d</code> #将本地数据部署到远端服务器(如github)<br><code>hexo init 文件夹名称</code> #初始化XX文件夹名称<br><code>npm update hexo -g</code>#升级<br><code>npm install hexo -g</code>#安装<br><code>node-v</code>          #查看node.js版本号<br><code>npm -v</code>        #查看npm版本号<br><code>git --version</code>  #查看git版本号<br><code>hexo -v</code>      #查看hexo版本号</p><p><code>hexo publish [layout] &lt;title&gt;</code>   #通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹,如:<code>$ hexo publish [layout] &lt;title&gt;</code>,草稿默认是不会显示在页面中的，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p><p><code>hexo new aaa &quot;bbb&quot;</code>  # 新建一篇文章,文章名称和标题分别为bbb.md 和 bbb.   文章采用aaa布局,  此时会在站点根目录下的—-&gt;source—–&gt;_post文件夹下生成bbb.md文件,  bbb.md文件的顶部(—–分割线上方区域,也称作Front matter区),生成</p><p><code>layout: aaa</code><br><code>title:</code><br><code>date:</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;769px&quot; height=&quot;369px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/hexo/hexo-5.1.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zzwwqq.xyz/categories/Hexo/"/>
    
    
      <category term="Hexo常用指令" scheme="https://zzwwqq.xyz/tags/Hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>hexo的next主题个性化配置</title>
    <link href="https://zzwwqq.xyz/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE.html"/>
    <id>https://zzwwqq.xyz/hexo的next主题个性化配置.html</id>
    <published>2019-03-22T09:48:28.000Z</published>
    <updated>2019-03-23T04:36:41.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>　　如果你觉得我的博客界面不错，你可以参考这篇文章，在这篇文章中总结了几十个个性化配置，并不是都要安装，取你所需即可．</p><h2 id="一、常用的个性化配置汇总："><a href="#一、常用的个性化配置汇总：" class="headerlink" title="一、常用的个性化配置汇总："></a>一、常用的个性化配置汇总：</h2><blockquote><p>１．更换主题</p><p>２．设置语言</p><p>３．字数统计和阅读时长(网站底部/文章内)</p><p>４．添加busuanzi: 统计浏览次数（本站总访客数，本站总访问量）</p><p>５．本站已安全运行 XX天 XX小时XX分XX秒</p><p>６．添加评论系统(常见的有: 网易云跟帖但现在已失效，来必力，valine) ,这里以valine为例</p><p>７．添加热度（文章阅读次数）</p><p>８．为博客加上宠物</p><p>９．鼠标点击出现桃心效果</p><p>１０．网页底部的动态桃心图像</p><p>１１．添加顶部加载条</p><p>１２．设置网站的图标Favicon</p><p>１３．DaoVoice 在线联系</p><p>１４．添加AddThis分享</p><p>１５．添加打赏</p><p>１６．文章加密访问</p><p>１７．在文章底部增加版权信息</p><p>１８．修改文章底部的那个带#号的标签</p><p>１９．在每篇文章末尾添加“本文结束”标记</p><p>２０．修改作者头像并旋转</p><p>２１．隐藏网页底部powered By Hexo / 强力驱动</p><p>２２．在右上角或者左上角实现fork me on github</p><p>２３．修改代码块自定义样式（设置代码高亮主题）</p><p>２４．开启代码块复制</p><p>２５．侧边栏社交链接</p><p>２６．图片处理(使用七牛云为Hexo存储图片等静态资源)</p><p>２７．修改背景图,以及侧边栏顶部颜色</p><p>２８．侧边栏添加网易云音乐</p><p>２９．底部添加公网安备</p><p>３０．取消“文章目录”的自动编号</p><p>３１．封面模式</p></blockquote><h2 id="１．更换主题-以next主题为例"><a href="#１．更换主题-以next主题为例" class="headerlink" title="１．更换主题: (以next主题为例)"></a>１．更换主题: (以next主题为例)</h2><p><strong>注: next 主题的 github仓库地址迁移了</strong></p><h3 id="１．１-下载主题"><a href="#１．１-下载主题" class="headerlink" title="１．１　下载主题:"></a>１．１　下载主题:</h3><p>旧版本next主题地址:    5以下的版本包含5:  <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">旧版本5以下</a></p><p>安装指令:    首先打开git bash进入根目录即 “ /blog/“   执行命令:<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>  此时会从next主题的作者的github仓库克隆next主题到 我们本地的 /blog/theme/next文件夹下</p><p>最新版在这里下载:      <a href="https://github.com/theme-next/" target="_blank" rel="noopener">新版本6开始</a></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.2.png" alt></p><p>安装指令:  同上 <code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p><p>安装完成后，打开 <strong>站点配置文件</strong>,找到 theme 字段，并将其值更改为 next,  <strong>一定要保存</strong></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.3.png" alt></p><p>依次执行<code>git clean</code>，<code>git g</code>,<code>git s</code> 然后查看运行结果: </p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.4.png" alt></p><p>nexT主题有四种选择，上面这个只是最简洁的一种，我选择的是Gemini布局。</p><h3 id="１．２-修改主题配置文件："><a href="#１．２-修改主题配置文件：" class="headerlink" title="１．２　修改主题配置文件："></a>１．２　修改<strong>主题配置文件：</strong></h3><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.5.png" alt></p><p>然后重新<code>git clean</code>，<code>git g</code>，<code>git s</code>查看效果:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.6.png" alt></p><h2 id="２．设置语言："><a href="#２．设置语言：" class="headerlink" title="２．设置语言："></a>２．设置语言：</h2><p>在<strong>站点配置文件</strong>中设置语言:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans     next5以下版本(包含)</span><br><span class="line">language: zh-CN       next6以上版本(包含)</span><br></pre></td></tr></table></figure><h2 id="３．字数统计和阅读时长-网站底部-文章内"><a href="#３．字数统计和阅读时长-网站底部-文章内" class="headerlink" title="３．字数统计和阅读时长(网站底部/文章内):"></a>３．字数统计和阅读时长(网站底部/文章内):</h2><p>３．１　首先安装插件:</p><p><code>$ npm install hexo-symbols-count-time --save</code></p><p>３．２　然后修改<strong>主题配置文件</strong>如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">separated_meta: <span class="literal">true</span>   ＃显示属性名称,设为<span class="literal">false</span>后只显示图标和统计数字,不显示属性的文字</span><br><span class="line">item_text_post: <span class="literal">true</span>   ＃显示属性名称,设为<span class="literal">false</span>后只显示图标和统计数字,不显示属性的文字</span><br><span class="line">item_text_total: <span class="literal">true</span> ＃底部footer是否显示字数统计属性文字(如站点总字数,站点阅读时长 ≈ <span class="number">1</span> 分钟)</span><br><span class="line">awl: <span class="number">4</span>     ＃计算字数的一个设置,没设置过</span><br><span class="line">wpm: <span class="number">275</span>  ＃一分钟阅读的字数</span><br></pre></td></tr></table></figure><p>３．３　站点配置文件中添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line"> #文章内是否显示</span><br><span class="line">  symbols: <span class="literal">true</span></span><br><span class="line">  time: <span class="literal">true</span></span><br><span class="line"> # 网页底部是否显示</span><br><span class="line">  total_symbols: <span class="literal">true</span></span><br><span class="line">  total_time: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>注意: 配置文件中的空格**　 </p><h2 id="４．添加busuanzi-统计浏览次数（本站总访客数，本站总访问量）"><a href="#４．添加busuanzi-统计浏览次数（本站总访客数，本站总访问量）" class="headerlink" title="４．添加busuanzi: 统计浏览次数（本站总访客数，本站总访问量）"></a>４．添加busuanzi: 统计浏览次数（本站总访客数，本站总访问量）</h2><p>打开/blog/themes/next/layout/_partials/footer.swig      在文件底部添加下面的代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">  本站总访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp;&amp;nbsp;| </span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    &amp;nbsp;本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="５．本站已安全运行-XX天-XX小时XX分XX秒"><a href="#５．本站已安全运行-XX天-XX小时XX分XX秒" class="headerlink" title="５．本站已安全运行 XX天 XX小时XX分XX秒"></a>５．本站已安全运行 XX天 XX小时XX分XX秒</h2><p>打开/blog/themes/next/layout/_partials/footer.swig      在文件底部添加下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"03/12/2019 12:00:00"</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间 </span></span><br><span class="line">        now.setTime(now.getTime()+<span class="number">250</span>); </span><br><span class="line">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span><br><span class="line">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span><br><span class="line">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span><br><span class="line">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span><br><span class="line">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="６．添加评论系统-常见的有-网易云跟帖但现在已失效，来必力，valine-这里以valine为例"><a href="#６．添加评论系统-常见的有-网易云跟帖但现在已失效，来必力，valine-这里以valine为例" class="headerlink" title="６．添加评论系统(常见的有: 网易云跟帖但现在已失效，来必力，valine) ,这里以valine为例:"></a>６．添加评论系统(常见的有: 网易云跟帖但现在已失效，来必力，valine) ,这里以valine为例:</h2><p>先注册<a href="http://link.zhihu.com/?target=https%3A//leancloud.cn/" target="_blank" rel="noopener">leancloud</a>账号,获取自己的appid,appkey</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.7.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.8.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.9.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.10.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.11.png" alt></p><p>打开<strong>主题配置文件</strong>,修改如下: </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true # 为true时启用评论</span><br><span class="line">  appid:  # 这里填写上面得到的APP ID   注意空一格再输入ID和key,</span><br><span class="line">  appkey:  # 这里填写上面得到的APP KEY</span><br><span class="line">  notify: false #  邮件通知</span><br><span class="line">  verify: false # 验证码</span><br><span class="line">  placeholder:  #评论框中预设的文字,随意填写</span><br><span class="line">  avatar: mm # gravatar style 头像,采用gravatar头像,到http://cn.gravatar.com/了解</span><br><span class="line">  guest_info: nick,mail,link # custom comment header 访客信息,显示在评论框上面,三者可随意选择或全选</span><br><span class="line">  pageSize: 10 # pagination size 评论分页大小</span><br><span class="line">  visitor: false #</span><br></pre></td></tr></table></figure><h2 id="７．添加热度（文章阅读次数）"><a href="#７．添加热度（文章阅读次数）" class="headerlink" title="７．添加热度（文章阅读次数）"></a>７．添加热度（文章阅读次数）</h2><p>修改<strong>主题配置文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  app_id:  #填入你leancloud账号的appid</span><br><span class="line">  app_key: #填入你leancloud账号的appkey</span><br></pre></td></tr></table></figure><p>打开<code>/blog/themes/next/layout/_macro/post.swig</code>,在画红线的区域添加<code>℃</code>：</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.20.png" alt></p><p>然后打开，<code>/blog/themes/next/languages/zh-Hans.yml</code>,将画红框的改为热度就OK了</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.21.png" alt></p><h2 id="８．为博客加上宠物"><a href="#８．为博客加上宠物" class="headerlink" title="８．为博客加上宠物"></a>８．为博客加上宠物</h2><p>８．１　在hexo根目录下安装插件:</p><p><code>$ npm install -save hexo-helper-live2d</code></p><p>８．２　安装需要的宠物插件:<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">宠物样式</a> <a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">源码地址</a></p><p><code>$ npm install {packagename}</code></p><p>其中{packagename} 替换为你要安装的宠物名,如<code>live2d-widget-model-shizuku</code></p><p>具体指令:  <code>$ npm install live2d-widget-model-shizuku</code></p><p>８．３　在<strong>站点配置文件</strong>中加上如下代码:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true   #开启宠物</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">  display:</span><br><span class="line">    position: right   #指定宠物显示的位置</span><br><span class="line">    width: 70    #指定宠物显示的宽度</span><br><span class="line">    height: 120   #指定宠物显示的高度</span><br><span class="line">  mobile:</span><br><span class="line">    show: true  #是否在手机上显示</span><br></pre></td></tr></table></figure><h2 id="９．鼠标点击出现桃心效果"><a href="#９．鼠标点击出现桃心效果" class="headerlink" title="９．鼠标点击出现桃心效果"></a>９．鼠标点击出现桃心效果</h2><p>并且将代码复制进去，然后保存</p><p>在<code>/themes/next/source/js/src</code>里面 新建<code>click-love.js</code>文件: 粘贴如下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小桃心--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/love.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>然后打开<code>\themes\next\layout\_layout.swig</code>文件,在末尾添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><h2 id="１０．网页底部的动态桃心图像"><a href="#１０．网页底部的动态桃心图像" class="headerlink" title="１０．网页底部的动态桃心图像"></a>１０．网页底部的动态桃心图像</h2><p><strong>修改主题配置文件:</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">icon:</span><br><span class="line">name: heart      #如果name的值为heart表示引用fontawesome网站上的心形图标</span><br><span class="line">animated: true     #如果想用动态图标应该将animated的值设为true</span><br><span class="line">color: "#ff0000"     #图标的色--用16进制数</span><br></pre></td></tr></table></figure><h2 id="１１．添加顶部加载条"><a href="#１１．添加顶部加载条" class="headerlink" title="１１．添加顶部加载条"></a>１１．添加顶部加载条</h2><p>在根目录打开git bash执行以下指令:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/theme-next/theme-next-pace source /lib/pace</span></span><br></pre></td></tr></table></figure><p>修改主题配置文件:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pace: true  #启用顶部加载条</span><br><span class="line">pace_theme: pace-theme-flash   #指定顶部加载条样式</span><br></pre></td></tr></table></figure><h2 id="１２．设置网站的图标Favicon"><a href="#１２．设置网站的图标Favicon" class="headerlink" title="１２．设置网站的图标Favicon"></a>１２．设置网站的图标Favicon</h2><p>１２．１　下载一个32*32的图片，并改名为favicon.ico, 然后放到/blog/themes/next/source/images目录</p><p>１２．２　<strong>修改主题配置文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">　small: <span class="regexp">/images/</span>favicon<span class="number">-16</span>x16-next.png</span><br><span class="line">　medium: <span class="regexp">/images/</span>favicon.ico</span><br><span class="line">　apple_touch_icon: <span class="regexp">/images/</span>apple-touch-icon-next.png</span><br><span class="line">　safari_pinned_tab: <span class="regexp">/images/</span>logo.svg</span><br></pre></td></tr></table></figure><h2 id="１３．-DaoVoice-在线联系"><a href="#１３．-DaoVoice-在线联系" class="headerlink" title="１３．　DaoVoice 在线联系"></a>１３．　DaoVoice 在线联系</h2><p>１３．１　<strong><a href="http://www.daovoice.io/" target="_blank" rel="noopener">注册地址:</a></strong>  ,获取app_id</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.12.png" alt></p><p>１３．２　/blog/themes/next/layout/_partials/head/head.swig 添加下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.custom_file_path.head %&#125; </span><br><span class="line">&#123;% <span class="keyword">set</span> custom_head = '../../../../../' + theme.custom_file_path.head %&#125;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">set</span> custom_head = '../../_custom/head.swig' %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% include custom_head %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.daovoice %&#125;</span><br><span class="line"> &lt;script&gt;(<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">"script"</span>,(<span class="string">'https:'</span> == <span class="built_in">document</span>.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/0eeeae6f.js"</span>,<span class="string">"daovoice"</span>)</span><br><span class="line"> daovoice(<span class="string">'init'</span>, &#123;</span><br><span class="line">  app_id: <span class="string">"06289ecd"</span></span><br><span class="line">&#125;);</span><br><span class="line">daovoice(<span class="string">'update'</span>);</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p>１３．３　修改主题的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 我们注册获取的id</span><br></pre></td></tr></table></figure><h2 id="１４．添加AddThis分享"><a href="#１４．添加AddThis分享" class="headerlink" title="１４．添加AddThis分享"></a>１４．添加AddThis分享</h2><p>１４．１　在网站 <a href="https://www.addthis.com/" target="_blank" rel="noopener">AddThis</a> 上注册账号。 可以使用 Google/Facebook/Twitter 账号进行第三方登陆</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.13.png" alt></p><p>１４．２　设置分享按钮的样式:(显示位置, 显示样式为扩展式,悬浮式等)</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.14.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.15.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.16.png" alt></p><p>１４．３　修改主题配置文件</p><figure class="highlight plain"><figcaption><span>你Addthis账号ID ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## １５．添加打赏:</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line"> reward:</span><br><span class="line"> 　　enable: true　＃开启</span><br><span class="line"> 　　comment: 坚持原创技术分享，您的支持将鼓励我继续创作！　＃图片上方显示的文本</span><br><span class="line"> 　　wechatpay: ＃图片地址</span><br><span class="line"> 　　alipay: ＃图片地址</span><br></pre></td></tr></table></figure><h2 id="１６．文章加密访问"><a href="#１６．文章加密访问" class="headerlink" title="１６．文章加密访问"></a>１６．文章加密访问</h2><p>１６．１　在　/blog/themes/next/layout/_partials/head/head.swig   文件中添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误！'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>１６．２　在需要加密的文章的页面顶部(Front matter区域)加入 “password :  设置密码值”</p><h2 id="１７．在文章底部增加版权信息"><a href="#１７．在文章底部增加版权信息" class="headerlink" title="１７．在文章底部增加版权信息"></a>１７．在文章底部增加版权信息</h2><p>１７．１　在<code>/blog/themes/next/layout/_macro/  下</code>添加 <code>my-copyright.swig</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> page.copyright %&#125;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"my_post_copyright"</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script src=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#123;&#123; page.date.format(<span class="string">"YYYY年MM月DD日 - HH:mm"</span>) &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/</span>span&gt;&#123;&#123; page.updated.format(<span class="string">"YYYY年MM月DD日 - HH:mm"</span>) &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;&lt;span&gt;原始链接:&lt;/</span>span&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"copy-path"</span>  title=<span class="string">"点击复制文章链接"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span>  <span class="attr">aria-label</span>=<span class="string">"复制成功！"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;&lt;span&gt;版权声明:&lt;/</span>span&gt;本博客所有文章除特别声明外，均采用 &lt;a rel=<span class="string">"license"</span> href=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> target=<span class="string">"_blank"</span> title=<span class="string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>BY-NC-SA &lt;<span class="regexp">/a&gt;许可协议。转载请注明出处!&lt;/</span>p&gt;  </span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt; </span></span><br><span class="line"><span class="regexp">    var clipboard = new Clipboard('.fa-clipboard');</span></span><br><span class="line"><span class="regexp">      $(".fa-clipboard").click(function()&#123;</span></span><br><span class="line"><span class="regexp">      clipboard.on('success', function()&#123;</span></span><br><span class="line"><span class="regexp">        swal(&#123;   </span></span><br><span class="line"><span class="regexp">          title: "",   </span></span><br><span class="line"><span class="regexp">          text: '复制成功',</span></span><br><span class="line"><span class="regexp">          icon: "success", </span></span><br><span class="line"><span class="regexp">          showConfirmButton: true</span></span><br><span class="line"><span class="regexp">          &#125;);</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;);  </span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>１７．２　在目录<code>/blog/themes/next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: <span class="number">85</span>%;</span><br><span class="line">  max-width: <span class="number">45</span>em;</span><br><span class="line">  margin: <span class="number">2.8</span>em auto <span class="number">0</span>;</span><br><span class="line">  padding: <span class="number">0.5</span>em <span class="number">1.0</span>em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: <span class="number">0.93</span>rem;</span><br><span class="line">  line-height: <span class="number">1.6</span>em;</span><br><span class="line">  word-<span class="keyword">break</span>: <span class="keyword">break</span>-all;</span><br><span class="line">  background: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;<span class="attr">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: <span class="number">5.2</span>em;</span><br><span class="line">  color: #b5b5b5;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: <span class="number">1</span>em;</span><br><span class="line">  width: <span class="number">5</span>em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #a3d2a3;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: <span class="number">1</span>em;</span><br><span class="line">  width: <span class="number">1</span>em;</span><br><span class="line">  +mobile()&#123;<span class="attr">display</span>:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>１７．３　修改<code>/blog/themes/next/layout/_macro/post.swig</code>，在下面位置添加:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.17.png" alt></p><p>代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div&gt;  </span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &#123;% include <span class="string">'my-copyright.swig'</span> %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>１７．４　修改<code>/blog/themes/next/source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p><p><code>@import &quot;my-post-copyright</code></p><p>保存重新生成即可。<br>１７．５　如果要在文章下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo个性化配置</span><br><span class="line">date: <span class="number">2017</span><span class="number">-05</span><span class="number">-22</span> <span class="number">22</span>:<span class="number">53</span>:<span class="number">53</span></span><br><span class="line">tags: hexo美化</span><br><span class="line">categories: Hexo</span><br><span class="line">copyright: <span class="literal">true</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>如果你觉得每次都要输入<code>copyright: true</code>很麻烦的话,那么在<code>/scaffolds/post.md</code>文件中添加：</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.18.png" alt></p><h2 id="１８．修改文章底部的那个带-号的标签"><a href="#１８．修改文章底部的那个带-号的标签" class="headerlink" title="１８．修改文章底部的那个带#号的标签"></a>１８．修改文章底部的那个带#号的标签</h2><p>修改模板 <code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h2 id="１９．在每篇文章末尾添加“本文结束”标记"><a href="#１９．在每篇文章末尾添加“本文结束”标记" class="headerlink" title="１９．在每篇文章末尾添加“本文结束”标记"></a>１９．在每篇文章末尾添加“本文结束”标记</h2><p>１９．１　在路径 <code>/blog/themes/next/layout/_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">        &lt;div style=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;-------------本文结束&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-paw"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>感谢您的阅读-------------<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>１９．２　接着打开<code>/blog/themes/next/layout/_macro/post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code>之前添加,即在如下位置添加</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.19.png" alt></p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">    &#123;% include <span class="string">'passage-end-tag.swig'</span> %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>１９．３　然后打开主题配置文件（<code>_config.yml</code>),在末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h2 id="２０．修改侧边栏作者头像并旋转："><a href="#２０．修改侧边栏作者头像并旋转：" class="headerlink" title="２０．修改侧边栏作者头像并旋转："></a>２０．修改侧边栏作者头像并旋转：</h2><p>２０．１　打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: <span class="number">0</span> auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  border-radius: <span class="number">80</span>px;</span><br><span class="line">  -webkit-border-radius: <span class="number">80</span>px;</span><br><span class="line">  -moz-border-radius: <span class="number">80</span>px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  -webkit-transition: -webkit-transform <span class="number">1.0</span>s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform <span class="number">1.0</span>s ease-out;</span><br><span class="line">  transition: transform <span class="number">1.0</span>s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  -webkit-transform: rotateZ(<span class="number">360</span>deg);</span><br><span class="line">  -moz-transform: rotateZ(<span class="number">360</span>deg);</span><br><span class="line">  transform: rotateZ(<span class="number">360</span>deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  <span class="number">0</span>% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(<span class="number">0</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100</span>% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(<span class="number">-360</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  <span class="number">0</span>% &#123;</span><br><span class="line">    -moz-transform: rotateZ(<span class="number">0</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100</span>% &#123;</span><br><span class="line">    -moz-transform: rotateZ(<span class="number">-360</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  <span class="number">0</span>% &#123;</span><br><span class="line">    transform: rotateZ(<span class="number">0</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100</span>% &#123;</span><br><span class="line">    transform: rotateZ(<span class="number">-360</span>deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="２１．隐藏网页底部powered-By-Hexo-强力驱动"><a href="#２１．隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="２１．隐藏网页底部powered By Hexo / 强力驱动"></a>２１．隐藏网页底部powered By Hexo / 强力驱动</h2><p>打开<code>themes/next/layout/_partials/footer.swig</code>,使用””隐藏之间的代码即可，或者直接删除。位置如图：</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.22.png" alt></p><h2 id="２2．在右上角或者左上角实现fork-me-on-github"><a href="#２2．在右上角或者左上角实现fork-me-on-github" class="headerlink" title="２2．在右上角或者左上角实现fork me on github"></a>２2．在右上角或者左上角实现fork me on github</h2><p>点击<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">这里</a> </p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.23.png" alt></p><p>或者 <a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的样式，并复制代码。</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.24.png" alt></p><p>/blog/themes/next/layout/_layout.swig文件中进行配置. next表示的是当前你使用的主题的样式.</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.25.png" alt></p><p><strong>注意的是: href 后面是自己的github的地址,记得修改哦!</strong></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.26.png" alt></p><h2 id="２３．修改代码块自定义样式"><a href="#２３．修改代码块自定义样式" class="headerlink" title="２３．修改代码块自定义样式"></a>２３．修改代码块自定义样式</h2><p><strong>修改主题配置文件</strong></p><p><code>highlight_theme: night bright</code>       #可选值:  normal | night | night eighties | night blue | night bright</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.27.png" alt></p><h2 id="２４．开启代码块复制"><a href="#２４．开启代码块复制" class="headerlink" title="２４．开启代码块复制"></a>２４．开启代码块复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  enable: true</span><br><span class="line">  show_result: true</span><br></pre></td></tr></table></figure><h2 id="２５．侧边栏社交链接"><a href="#２５．侧边栏社交链接" class="headerlink" title="２５．侧边栏社交链接"></a>２５．侧边栏社交链接</h2><p><strong>修改主题配置文件</strong>: 链接放置在 <code>social</code> 字段下，一行一个链接。其键值格式是 <code>显示文本: 链接地址</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#设置侧边栏社交链</span><br><span class="line">social:</span><br><span class="line">  GitHub: https:<span class="comment">//github.com/zzwwqq || github</span></span><br><span class="line">  E-Mail: mailto:zwq13264860490@gmail.com || envelope</span><br><span class="line">  Weibo: https:<span class="comment">//weibo.com/u/5564810309/home?wvr=5 || weibo</span></span><br><span class="line">  知乎: https:<span class="comment">//www.zhihu.com/people/shen-qiu-wu-hen-66/activities || snapchat</span></span><br><span class="line"></span><br><span class="line">#这里键的值必须和上面social中的 "||" 后面指定的名称一致，在fontawesome官网找喜欢的小图标，将名字复制在如下位置，如E-Mail:对应的图标名称为envelope。</span><br><span class="line"></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true    # `enable` 选项用于控制是否显示图标</span><br><span class="line">  icons_only: <span class="literal">false</span></span><br><span class="line">  transition: <span class="literal">false</span> </span><br><span class="line">  #图标</span><br><span class="line">  GitHub: github</span><br><span class="line">  E-Mail: envelope</span><br><span class="line">  Weibo: weibo</span><br><span class="line">  知乎: snapchat</span><br></pre></td></tr></table></figure><p>２６．图片处理(使用七牛云为Hexo存储图片等静态资源)</p><p> ２６．１　七牛是什么?</p><p><a href="http://www.qiniu.com/" target="_blank" rel="noopener">七牛</a> 是一个云存储服务商，注册并实名认证之后<a href="http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/#fn.1" target="_blank" rel="noopener">1</a>后，你将免费享有 10GB 存储空间，每月 10GB 下载流量、100 万次 GET 请求、 10 万次 PUT/DELETE 请求。七牛的定位不是像百度云一样的 <strong>网盘</strong> ，也不是同坚果云一般的 <strong>同步云</strong> ，而是 <strong>CDN</strong> <a href="http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/#fn.2" target="_blank" rel="noopener">2</a> ，让你在浏览网页的时候最快的接收到页面中的图片、音频等文件，所以非常适合个人、企业用户用来储存站点资源。对于个人博主来说，你可以把博客中的图片、音频、视频等媒体上传到七牛，在博客中引用；也可以将站点需要加载的CSS、JS等文件上传到七牛，以加速网站。</p><p>２６．２　与其他上传站点相比：</p><ul><li>更稳定：七牛毕竟是老牌服务商，数据的安全性和稳定性都较有保证。如果上传到什么小网站，哪天发现图片都打不开了才是人间惨剧~</li><li>更灵活：配合 <code>hexo-qiniu-sync</code> 插件<a href="http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/#fn.4" target="_blank" rel="noopener">4</a>，就算是七牛以后更改了空间域名，也不用一篇一篇地去改外链地址，只要在配置文件中修改外链前缀即可。</li><li>更方便：配合 <code>hexo-qiniu-sync</code> 插件，不必”上传→复制链接→引用外链“，直接按照本地路径引用，然后键入一条命令同步到七牛就好。会自动识别哪些是新增、修改的文件需要上传，哪些是原有的文件不需改动，十分方便。</li></ul><p>２６．３　七牛并非尽善尽美：</p><ul><li>在线文件管理不支持目录</li><li>本地删除文件，云端不能同步删除文件</li></ul><p>２６．４　开始安装：</p><p>１．点击 <a href="https://portal.qiniu.com/signup?code=3lbz03l9r6c7m" target="_blank" rel="noopener">这里</a> 申请七牛账户</p><p>２．创建存储空间（七牛叫作”Bucket“），注意添加的空间为”对象存储“，访问控制选择”公开空间“：</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.28.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.29.png" alt></p><p>３．点击页面右上角头像→进入”密钥管理“→复制当前使用中的AK和SK，待会设置插件时会用到。</p><p>４．安装插件：在hexo主目录下运行以下命令：</p><p><code>npm install hexo-qiniu-sync --save</code></p><p>５．<strong>站点配置文件</strong>中添加下面内容:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">qiniu:</span><br><span class="line">　offline: false    #是否离线. 离线状态将使用本地地址渲染</span><br><span class="line">  sync: true        #是否同步</span><br><span class="line">  bucket: blog     #这里替换为你存储空间的名称</span><br><span class="line">  #secret_file: sec/qn.json or C:</span><br><span class="line">  access_key: 2rRw0dG-jQYCoqs9rvsltVQqzSBVpwS     #上传密钥AccessKey,替换为你自己的</span><br><span class="line">  secret_key: OCBcCU3tqKiBdOza9PlLoR6AcA-fV_u   #上传密钥SecretKey,替换为你自己的</span><br><span class="line">  dirPrefix: static                  #上传的资源子目录前缀.如设置为static，那么urlPrefix后面也要加static</span><br><span class="line">  urlPrefix: http:<span class="comment">//cdn.zzwwqq.xyz/static/   #这里替换为你自己的外链域名,如何获取,查看下面图示</span></span><br><span class="line">  up_host: http:<span class="comment">//upload.qiniu.com    #这里不用改</span></span><br><span class="line">  local_dir: static      #本地资源储存目录。在本例中，待上传的资源都储存在hexo主目录中的static 文件夹（也就是与 source 目录平级）中。</span><br><span class="line">  update_exist: true    #是否更新已经上传过的文件</span><br><span class="line">  #运行程序后,会自动在本地根目录生成static目录,static目录下生成三个文件夹,js,css,images</span><br><span class="line">  image: </span><br><span class="line">    folder: images</span><br><span class="line">    extend: </span><br><span class="line">  js:</span><br><span class="line">    folder: js</span><br><span class="line">  css:</span><br><span class="line">    folder: css</span><br></pre></td></tr></table></figure><p>６．如何引用七牛上的图片?</p><p>引用地址：urlPrefix＋dirPrefix＋images+ 相对于/blog/static/images/ 的文件路径</p><p>例如: <a href="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-1.jpg" target="_blank" rel="noopener">http://cdn.zzwwqq.xyz/static/images/hexo/hexo-1.jpg</a></p><h2 id="２７．修改背景图-以及侧边栏顶部颜色，主／副标题颜色"><a href="#２７．修改背景图-以及侧边栏顶部颜色，主／副标题颜色" class="headerlink" title="２７．修改背景图,以及侧边栏顶部颜色，主／副标题颜色"></a>２７．修改背景图,以及侧边栏顶部颜色，主／副标题颜色</h2><p>效果图：</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.31.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//添加背景图片</span><br><span class="line">body &#123; </span><br><span class="line">background:url(http://cdn.zzwwqq.xyz/%E6%98%9F%E7%A9%BA.jpg)&#125;</span><br><span class="line">//改掉题头颜色</span><br><span class="line">.site-meta &#123;</span><br><span class="line">background:url(http://cdn.zzwwqq.xyz/static/images/hexo/hexo-0-site-meta.jpg)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">//主标题颜色</span><br><span class="line">.brand&#123;</span><br><span class="line">  color: #4dfc23</span><br><span class="line">  &#125;</span><br><span class="line">//副标题颜色</span><br><span class="line">.site-subtitle&#123;</span><br><span class="line">  color: #4dfc23</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.footer&#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    color: #ededed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="２８．侧边栏添加网易云音乐"><a href="#２８．侧边栏添加网易云音乐" class="headerlink" title="２８．侧边栏添加网易云音乐"></a>２８．侧边栏添加网易云音乐</h2><p>效果图:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.32.png" alt></p><ol><li><p>打开<a href="http://music.163.com/" target="_blank" rel="noopener">网易云音乐官网</a>，进入想插入的音乐的界面</p></li><li><p>点击“生成外链播放器”</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.33.png" alt></p></li><li><p>复制代码</p></li></ol><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.34.png" alt></p><p>##２９．底部添加公网安备</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"BbeiAn-info"</span> style=<span class="string">"color:#4dfc23"</span>&gt;</span><br><span class="line">   &#123;&#123; __(<span class="string">'鄂ICP备'</span>) &#125;&#125; -</span><br><span class="line">    &lt;a target=<span class="string">"_blank"</span> href=<span class="string">"http://www.miitbeian.gov.cn/"</span> style=<span class="string">"color:#4dfc23;"</span>  rel=<span class="string">"nofollow"</span>&gt;<span class="number">18025394</span>&lt;<span class="regexp">/a&gt; &lt;!--a标签中增加nofollow属性，避免爬虫出站。--&gt;| </span></span><br><span class="line">&lt;a target="_blank" href="http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=42090202000295" style="text-decoration:none;color:#4dfc23;padding-left:30px;background:url(https://s1.ax1x.com/2018/09/29/ilmwIH.png) no-repeat left center" rel="nofollow"&gt;&#123;&#123; __('鄂公网安备 42090202000295') &#125;&#125;&lt;/a&gt;  &lt;!--这里将图标作为了背景，以使得能和后面的文字在同一行--&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="３０．取消“文章目录”的自动编号"><a href="#３０．取消“文章目录”的自动编号" class="headerlink" title="３０．取消“文章目录”的自动编号"></a>３０．取消“文章目录”的自动编号</h2><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.35.png" alt></p><p>修改如下</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.37.png" alt></p><p>修改后:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.36.png" alt></p><h2 id="３１．封面模式"><a href="#３１．封面模式" class="headerlink" title="３１．封面模式"></a>３１．封面模式</h2><p>需要安装一个小插件是：<a href="https://github.com/fuchen/hexo-less" target="_blank" rel="noopener">hexo-less</a>，安装指令: <code>$ npm install --save hexo-less</code></p><p>该插件解决了什么问题呢？</p><p>手动设置文章概要，但不影响章内䆟。只需在文章中写 <code>&lt;!-- less --&gt;</code> 作为分割线， <code>&lt;!-- less --&gt;</code> 上面的内容会作为摘要，但不作为文章内容的一部分。</p><p>举例，我想让这篇文章在主页列表中，只显示一张美图。</p><p>效果图：</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.38.png" alt></p><p>文章中代码如下:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.39.png" alt></p><h2 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明:"></a>二、说明:</h2><p>修改hexo的<strong>站点配置文件</strong>,需要重启服务器(即执行 <code>$ hexo s</code>命令),才能生效.</p><p>修改其他文件如主题配置文件,不必重启服务器(即执行 <code>$ hexo s</code>命令), 直接刷新页面即可生效.</p><p>参考链接:</p><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p><p><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">https://www.jianshu.com/p/f054333ac9e6</a></p><p><a href="https://www.jianshu.com/p/d0fe52c73950" target="_blank" rel="noopener">https://www.jianshu.com/p/d0fe52c73950</a></p><p><a href="https://xian6ge.cn/posts/40ba2cba/" target="_blank" rel="noopener">https://xian6ge.cn/posts/40ba2cba/</a></p><p><a href="https://me.idealli.com/post/e8d13fc.html" target="_blank" rel="noopener">https://me.idealli.com/post/e8d13fc.html</a></p><p><a href="http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/" target="_blank" rel="noopener">http://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/</a></p><p><a href="https://www.jianshu.com/p/805bd0b65d98" target="_blank" rel="noopener">https://www.jianshu.com/p/805bd0b65d98</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;769px&quot; height=&quot;369px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/hexo/hexo-4.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zzwwqq.xyz/categories/Hexo/"/>
    
    
      <category term="Hexo美化" scheme="https://zzwwqq.xyz/tags/Hexo%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo发布文章</title>
    <link href="https://zzwwqq.xyz/%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0.html"/>
    <id>https://zzwwqq.xyz/使用hexo发布文章.html</id>
    <published>2019-03-22T07:16:55.000Z</published>
    <updated>2019-03-23T04:36:41.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>　　经过前面两节的操作，hexo的整个框架以及和github关联已经配置好了,现在我们要考虑的就是 如何用指令去创建一篇文章,然后发布? .我们先来看一下hexo的目录结构,了解每个目录的作用,这将让我们对hexo的运行原理有一个大概的认识,对于我们后面美化主题是有帮助的,  然后再来创建文章,并发布到本地服务器,最后查看效果.</p><h2 id="一、Hexo的目录分析"><a href="#一、Hexo的目录分析" class="headerlink" title="一、Hexo的目录分析:"></a>一、Hexo的目录分析:</h2><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-3.2.png" alt></p><blockquote><p>１．.deploy_git:　这个目录是执行 hexo d 命令 后生成的,主要存放部署的信息.</p><p>２．node_modules:　这个目录存放的是一些插件包</p><p>３．public :　这个目录是执行 hexo  g后生成的, hexo会将”/blog/source/“   下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “    路径下</p><p>４．scaffolds:　用来存放模板文件。模板文件的正文部分一般为空，一般在模板文件顶部有一个区域 ( 以 <code>---</code> 分隔的区域) 称作Front-matter,在这里配置的变量主要有title(即文章标题), date(即文章创建日期),comment(是否开启评论), tags(文章标签), categories(文章所属分类)等. 当你新建文章时，Hexo 会根据 scaffold 来建立文件，也就是说会在你创建的每个文件顶部自动加上模板文件中配置的这些内容. </p><p>５．source:　存放你的文章(.md后缀的文件)</p><p>６．static:　这个目录是我自己创建的，专门用来存放图片的</p><p>７．themes:　这个目录是存放主题的(默认主题是landscape,  目前使用最多的是next主题)</p><p>８．.gitignore:　这个文件和git有关, 在这个文件里面可以配置哪些文件不被提交(例如: 配置  *.log ,那么在hexo d命令的时候, 任何以.log为后缀的文件将不会被提交到github)</p><p>９．_admin-config.yml:　这个文件是安装了hexo 后台管理插件后生成的,这里暂时不作介绍,后面再说</p><p>１０．_config.yml:　这个文件是hexo的核心配置文件(也称站点配置文件)</p><p>１１．_config.yml.back.yml:　这个文件是我自己创建的,是站点配置文件的备份. 以防哪一天老眼昏花把内容改错了,到时可以恢复.</p><p>１２．package.json:　应用程序的信息。<a href="https://www.ejs.co/" target="_blank" rel="noopener">EJS</a>, <a href="http://learnboost.github.io/stylus/" target="_blank" rel="noopener">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a> renderer 已默认安装，您可以自由移除。</p><p>１３．db.json：</p><p>１４．package-lock.json:　</p></blockquote><h2 id="二、使用Hexo指令创建一篇文章"><a href="#二、使用Hexo指令创建一篇文章" class="headerlink" title="二、使用Hexo指令创建一篇文章:"></a>二、使用Hexo指令创建一篇文章:</h2><p>​    <code>$ hexo new  [layout]  &lt;title&gt;</code>    </p><p>这里有必要对指令作一些说明:</p><h3 id="就-layout-即＂布局＂-而言"><a href="#就-layout-即＂布局＂-而言" class="headerlink" title="就[layout]即＂布局＂ 而言:"></a>就<code>[layout]</code>即＂布局＂ 而言:</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局:</th><th>路径:</th><th>说明:</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td><td>如果你输入的指令中[layout]参数空着,那么默认是post;例如:<code>hexo new 我的第一篇文章</code>;等价于:<code>hexo new post 我的第一篇文章</code>;  产生的作用就是: 在source/_posts路径下生成    “我的第一篇文章.md”    文件,这个就是你要写文章的那个文件.</td></tr><tr><td><code>page</code></td><td><code>source</code></td><td></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td><td>你可以通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹,如:<code>$ hexo publish [layout] &lt;title&gt;</code>,草稿默认是不会显示在页面中的，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</td></tr></tbody></table><h3 id="就-lt-title-gt-而言"><a href="#就-lt-title-gt-而言" class="headerlink" title="就&lt;title&gt;而言:"></a>就<code>&lt;title&gt;</code>而言:</h3><p>默认是指定文章的标题和.md文件名称, 你可以任意指定一个名称来取代指令中的<code>&lt;title&gt;</code>参数.</p><p><strong>注: 如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</strong></p><h2 id="三、举例"><a href="#三、举例" class="headerlink" title="三、举例:"></a>三、举例:</h2><p>　　需求: 我要创建一篇文章,文件名为   “使用hexo发布文章”   文章标题为”使用hexo发布文章”   并且自动在文件顶部(Front-Matter区域),添加文章分类,标签 的键, 键对应的值由我们自己添加.最后发布到本地服务器查看效果.</p><p>首先修改模板文件: </p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-3.3.png" alt></p><p>打开git bash 执行指令:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-3.4.png" alt></p><p>查看生成文件所在目录以及文件名: </p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-3.5.png" alt></p><p>查看生成的文章,  文章标题,分类,标签等是否自动添加了: </p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-3.6.png" alt></p><p>给文章添加分类,和标签:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-3.7.png" alt></p><p>发布文章到本地服务器:</p><p>　　<code>$ hexo clean</code></p><p>　　<code>$ hexo g</code></p><p>　　<code>$ hexo s</code></p><p>查看效果:</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-3.8.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-3.9.png" alt></p><h2 id="四、说明"><a href="#四、说明" class="headerlink" title="四、说明:"></a>四、说明:</h2><p>　　通过上面的操作后，你可能会感到奇怪，为什么自己的界面和图示的不一样呢？这里我得解释下，在第一节安装hexo时,hexo默认给我们安装了ｌａｎｄｓｃａｐｅ主题. 这个主题可以在 “/blog/themes”  路径下找到.  而我安装的是next主题,并做了些个性化配置. 所以和你的界面不同. 如果你和我一样对默认主题不满意,喜爱折腾,追求完美,那么请关注下一节内容.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;769px&quot; height=&quot;369px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/hexo/hexo-3.1.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zzwwqq.xyz/categories/Hexo/"/>
    
    
      <category term="使用hexo发布文章" scheme="https://zzwwqq.xyz/tags/%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署到GitHub</title>
    <link href="https://zzwwqq.xyz/hexo%E9%83%A8%E7%BD%B2%E5%88%B0GitHub.html"/>
    <id>https://zzwwqq.xyz/hexo部署到GitHub.html</id>
    <published>2019-03-22T02:46:39.000Z</published>
    <updated>2019-03-22T06:29:41.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>　　上一节我们已经将hexo部署到本地了，但是只有在你自己主机上才能查看博客，如果你想让任何人随时随地都能访问到你的博客，那么你可以考虑将hexo部署到github(属于国外,所以访问速度要慢一些)或者codying(国内),如果你是一个程序员,那么推荐你选择github, 你要是不知道GitHub， 那就太说不过去了， 我可能遇到了一个假的程序员！</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h2><p>　　１．注册一个github账号:  <a href="https://github.com/" target="_blank" rel="noopener">注册</a></p><p>　　２．回到你的本地机,打开git bash,设置用户名和邮箱:(目的是:上传文件的时候告诉github,是谁向远程仓库上传数据)</p><p>　　　　　　<code>$ git config --global　user.name &quot;Your Name&quot;</code></p><p>　　　　　　<code>$ git config --global user.email　&quot;email@example.com&quot;</code></p><p>　　　　<strong>注: 这里”Your Name” 替换为你的GitHub的用户名,”<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“替换为你的GitHub的邮箱</strong></p><p>　　　　输入完后,通过以下命令检查你的设置是否正确: (如果你比较懒,那就忽略吧!)</p><p>　　　　　　<code>$ git config user.name</code></p><p>　　　　　　<code>$ git config user.email</code></p><p>　　３．生成ＳＳＨ密钥并添加到github：</p><p>　　　　　　<code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>    </p><p>　　　　此时它会告诉你已经生成了.ssh的文件夹, 在你的电脑中找到它,复制id_rsa.pub 文件中的内容. 此时回到GitHub页面</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.3.png" alt></p><p>​     　　　　　　 <img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.4.png" alt></p><p>　　　　然后回到gitbash中，输入指令查看是否添加成功:  <code>$ ssh -T git@github.com</code>　；如果你看到以下内容，恭喜你配置成功了．</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.5.png" alt></p><p>　　４．创建github仓库:</p><p>​                <img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.6.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.7.png" alt></p><p>​                <img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.8.png" alt></p><p>选择一个主题: (临时测试用,等会会覆盖的)    <img src="/../../static/images/hexo-2.9.png" alt>浏览器地址栏输入用户名.github.io：如果出现下面的界面说明你的域名已经生效<img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.10.png" alt></p><p>５．将Hexo部署到github:</p><p>　　经过上面的操作后,此时我们就可以将hexo和GitHub关联起来了,也就是将hexo生成的文章部署到github</p><p>　　打开站点配置文件(/blog/_config.yml), 翻到最后,找到deploy: 修改为:​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: github: git@github.com:zzwwqq/zzwwqq.github.io.git,master</span><br></pre></td></tr></table></figure><p>　<strong>说明:  </strong></p><p>　　　master 表示 部署到远程仓库的master分支上</p><p>　　　<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:zzwwqq/zzwwqq.github.io.git 改为你的仓库地址, 你可以去github网页上拷贝</p><p><img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.11.png" alt></p><p>　　　安装deploy-git, 也就是部署的命令,这样你才能用命令部署到GitHub.</p><p>　　　<code>$ npm install hexo-deployer-git --save</code></p><p>　　　然后执行下述命令:</p><p>　　　<code>hexo clean</code></p><p>　　　<code>hexo  g</code></p><p>　　　<code>hexo d</code> </p><p>执行了hexo d后 ,如果最后一行显示如下内容,说明部署成功,<img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.12.png" alt></p><p>现在你可以去浏览器地址栏输入 你的域名进行访问了.<img src="http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.13.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;750px&quot; height=&quot;300px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/hexo/hexo-2.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://zzwwqq.xyz/categories/Hexo/"/>
    
    
      <category term="hexo部署到GitHub" scheme="https://zzwwqq.xyz/tags/hexo%E9%83%A8%E7%BD%B2%E5%88%B0GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用指令</title>
    <link href="https://zzwwqq.xyz/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html"/>
    <id>https://zzwwqq.xyz/Linux常用指令.html</id>
    <published>2019-03-21T14:38:05.000Z</published>
    <updated>2019-03-23T08:43:34.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="１．帮助：-查看指令的详细信息"><a href="#１．帮助：-查看指令的详细信息" class="headerlink" title="１．帮助：(查看指令的详细信息)"></a>１．帮助：(查看指令的详细信息)</h3><p>1.1 <code>xxx  --help      (xxx  -h)</code></p><p>1.2 <code>man xxx</code> </p><h3 id="２．查看哪个程序占用了特定端口？占用某个端口的进程是谁"><a href="#２．查看哪个程序占用了特定端口？占用某个端口的进程是谁" class="headerlink" title="２．查看哪个程序占用了特定端口？占用某个端口的进程是谁?"></a>２．查看哪个程序占用了特定端口？占用某个端口的进程是谁?</h3><p>2.1 <code>lsof -i -n -P | grep :80</code>     //查看哪个程序占用了特定端口</p><p>2.2 <code>lsof -i</code>//显示所有打开的端口</p><p>2.3 <code>lsof -i:80</code> //显示所有打开80端口的进程</p><p>2.4 <code>lsof -n</code>    //不将IP转换为hostname，缺省是不加上-n参数</p><p>　　-P　 //port numbers to port names;</p><p>　　　　</p><h3 id="３．查看磁盘使用情况："><a href="#３．查看磁盘使用情况：" class="headerlink" title="３．查看磁盘使用情况："></a>３．查看磁盘使用情况：</h3><p>　　查看磁盘中指定目录的使用情况：<code>du -ach --max-depth=1  指定目录的路径</code></p><p>　　查看系统磁盘占用情况：<code>df  -lh</code></p><h3 id="４．进程相关操作："><a href="#４．进程相关操作：" class="headerlink" title="４．进程相关操作："></a>４．进程相关操作：</h3><p>　　查看系统执行的进程（不包括父进程）：<code>ps  -aux | more</code>     (<code>ps -aux | grep xxxx</code>)</p><p>　　查看当前所有进程，包括父进程：<code>ps   -ef  | more</code>     (<code>ps -ef | grep xxxx</code>)</p><p>　　查看系统负载：<code>w</code></p><p>　　动态查看负载: <code>top</code> </p><p>　　在 top 状态下:</p><p>　　　　　　按shift + m，可以按照内存使用大小排序。</p><p>　　　　　　按数字 1 可以列出各颗 cpu 的使用状态。</p><p>　　静态查看系统负载：<code>top -bn1</code>  </p><p>　　　　　　和 top 命令唯一的区别就是，它一次性全部把所有信息输出出来而非动态显示。</p><p>　　查看系统当前剩余多少内存：</p><p>　　　　　<code>free   -h</code>   (-h及human，以方便人阅读方式显示) </p><p>　　杀死进程：<code>kill 进程号</code></p><p>　　强制杀死进程：<code>kill -9 进程号</code></p><p>　　按照进程名强制杀死该进程名的所有进程：<code>pkill -9 进程名</code></p><p>　　按照进程名杀死进程：<code>killall 进程名</code></p><h3 id="５．查看系统信息："><a href="#５．查看系统信息：" class="headerlink" title="５．查看系统信息："></a>５．查看系统信息：</h3><p>　　查看内核版本号：<code>uname  -r</code></p><p>　　查看系统内核版本，gcc编译器版本详细信息： <code>cat /proc/version</code></p><p>　　查看系统信息：<code>cat /etc/redhat-release</code></p><p>　　查看操作系统版本所有信息:     <code>lsb_release -a</code></p><p>　　查看内存信息                            <code>cat /proc/meminfo</code></p><p>　　查看网卡信息           <code>dmesg | grep -i eth</code></p><p>　　查看机器型号  <code>dmidecode | grep &quot;Product Name&quot;</code> </p><p>　　查看硬盘信息命令 :    <code>fdisk -l</code></p><p>　　查看主板信息          <code>dmidecode |grep -A16 &quot;System Information$&quot;</code></p><p>　　查看CPU信息（型号)               <code>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</code></p><p>　　查看CPU的主频          <code>cat /proc/cpuinfo |grep MHz|uniq</code> </p><p>　　查看当前CPU运行在32bit还是64bit模式下    <code>getconf LONG_BIT</code></p><p>　　查看是否支持64bit   <code>cat /proc/cpuinfo | grep flags | grep &#39;lm&#39; | wc -l</code>    (如果结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit)</p><p>　　查看CPU是几核:  <code>cat /proc/cpuinfo |grep &quot;cores&quot;|uniq</code></p><p>　　逻辑CPU个数：<code>cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l</code></p><p>　　物理CPU个数： <code>cat /proc/cpuinfo | grep &quot;physical id&quot; | sort | uniq | wc -l</code></p><p>　　每个物理CPU中Core的个数： <code>cat /proc/cpuinfo | grep &quot;cpu cores&quot; | wc -l</code></p><h3 id="６．查看网络："><a href="#６．查看网络：" class="headerlink" title="６．查看网络："></a>６．查看网络：</h3><p>　　查看当前主机的ip地址和网卡信息:                 <code>ifconfig</code>                  （附加网卡的启用ifup eth0与停用stop eth0命令）</p><p>　　查看IP地址信息：<code>ip  addr</code>  (注：安装minimal版的CentOS系统时，ifconfig等网络相关的指令用不了，暂时可以用ip addr)</p><p>　　测试网络的连通性 :                                        <code>ping</code> </p><p>　　(网络统计)命令显示连接信息,路由表信息等:         <code>netstat</code>                通常配合使用参数，这里只演示一个参数。netstat -?</p><p> 　　打印网络连接状况：<code>netstat   -anp</code>   （-p表示显示进程名和进程ID）</p><p>　　当前系统启动哪些端口：<code>netstat -lnp</code> （-l表示显示正在监听的端口)netstat指令无效时：使用<code>yum install net-tools</code>安装</p><p>　　路由跟踪命令:           <code>traceroute</code>                                                   可以查看到你从源到目的的所经过的路由</p><p>　　查询DNS相关信息记录,CNAME,MX记录等等:      <code>dig</code>                     这个命令主要用于解决相关DNS查询；</p><p>​                                                                           <code>nslookup</code>           也具备查询DNS的功能，还可以显示一个ip地址的记录！</p><p>　　查找到IP的名称或IP的名字在IPv4和IPv6 DNS记录和查询:     <code>host  IP地址</code>              例如host <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>　　查看主机名:                           <code>hostname</code>                                        或者你可以到/etc/sysconfig/network中修改主机名。</p><p>　　查看路由表信息:             <code>route</code></p><p>　　增加和删除路由条目:   <code>root add -net   192.168.199.129/24   gw  192.168.199.1</code></p><p>　　查看默认的表使用:     <code>arp</code>                            为地址解析协议</p><p>　　查看网络模式和网络速度等信息:    <code>ethtool</code>       有关配置可以到/etc/sysconfig/network-scripts/ifcfg-eth0下进行修改。  </p><h3 id="７．任务调度："><a href="#７．任务调度：" class="headerlink" title="７．任务调度："></a>７．任务调度：</h3><p>　　编辑定时任务：<code>crontab   -e</code> </p><p>　　删除：<code>crontab -r</code></p><p>　　查询：<code>crontab -l</code></p><p>　　重启：<code>service  crond restart</code></p><h3 id="８．压缩-解压缩："><a href="#８．压缩-解压缩：" class="headerlink" title="８．压缩/解压缩："></a>８．压缩/解压缩：</h3><p>　　解压到当前目录：<code>tar -zxvf  xxx.tar.gz</code>   </p><p>　　解压到指定目录：<code>tar -zxvf  xxx.tar.gz -C 目标目录</code></p><p>　　压缩：tar -zcvf  打包后的文件名（以.tar.gz为后缀）   要压缩的文件名</p><p>　　tar里面没有针对xz格式的参数比如 -z是针对 gzip，-j是针对 bzip2）</p><p>　　解压tar.xz文件：</p><p>　　　　　先 xz -d xxx.tar.xz 将 xxx.tar.xz解压成 xxx.tar </p><p>　　　　　然后，再用 <code>tar xvf xxx.tar</code>来解包。</p><p>　　创建tar.xz文件：</p><p>　　　　　先 <code>tar cvf xxx.tar xxx/</code> 这样创建xxx.tar文件，</p><p>　　　　　然后使用 <code>xz -z xxx.tar</code> 来将 xxx.tar压缩成为 xxx.tar.xz</p><h3 id="９．rpm：安装-查询-删除rpm包："><a href="#９．rpm：安装-查询-删除rpm包：" class="headerlink" title="９．rpm：安装/查询/删除rpm包："></a>９．rpm：安装/查询/删除rpm包：</h3><p>　　安装本地的rpm包：<code>rpm  -ivh  rpm包全路径名</code></p><p>　　查询是否安装了某个rpm包：<code>rpm  -qa | grep 软件名</code></p><p>　　删除rpm方法安装的某个rpm包：   <code>rpm  -e   软件包名</code></p><p>　　升级某个rpm包：<code>rpm -Uvh  软件包名</code></p><h3 id="１０．yum：安装-查询-删除rpm包："><a href="#１０．yum：安装-查询-删除rpm包：" class="headerlink" title="１０．yum：安装/查询/删除rpm包："></a>１０．yum：安装/查询/删除rpm包：</h3><p>　　查询公网的yum服务器中是否有我们要安装的某个软件源：<code>yum  list | grep  软件名</code>      (或者用yum  search  软件名)</p><p>　　安装最新版的某个软件（默认）：<code>yum  -y  install  软件名</code></p><p>　　安装指定版本的某个软件：<code>yum  -y  install   软件名-版本号</code></p><p>　　升级某个rpm包： <code>yum update -y  软件名</code>     （查看是否有新版本及版本号 yum update |grep 软件名）</p><p>　　删除yum方式安装的rpm包：<code>yum  remove 软件名</code></p><p>　　当要使用一个指令，系统提示不存在，于是用yum安装它但又不知道它属于哪个rpm包时：<code>yum  provides 指令名</code>（以ifconfig为例：<code>yum  provides  ifconfig</code>）</p><p>　　查看包的关系：<code>repoquery --nvr --whatprovides  包名</code>    （ repoquery是yum扩展工具包yum-utils中的一个工具，所有如果你没有repoquery命令的话，可以先 <code>sudo yum install yum-utils</code> 安装yum-utils包）  </p><h3 id="１１．防火墙："><a href="#１１．防火墙：" class="headerlink" title="１１．防火墙："></a>１１．防火墙：</h3><p>　　CentOS7查看防火墙状态：<code>systemctl  status firewalld</code>    (CentOS6查看防火墙状态:service  iptables  status)</p><p>　　临时关闭防火墙：<code>systemctl  stop firewalld</code> </p><p>　　启动防火墙：<code>systemctl  start  firewalld</code></p><h3 id="１２．关机-重启-注销linux："><a href="#１２．关机-重启-注销linux：" class="headerlink" title="１２．关机/重启/注销linux："></a>１２．关机/重启/注销linux：</h3><p>　　关机：<code>halt</code>   （或者shutdown  -h 1 表示一分钟后关机；shutdown  -h now立刻关机）</p><p>　　重启：<code>reboot</code></p><p>　　注销：<code>logout</code></p><h3 id="１３．文件-目录操作："><a href="#１３．文件-目录操作：" class="headerlink" title="１３．文件/目录操作："></a>１３．文件/目录操作：</h3><p>　　创建目录（父目录不存在时创建父目录，即级联创建目录）：<code>mkdir  -pv  目录名</code>（目录名如./aaa/bbb/ccc/ddd）</p><p>　　创建文件：<code>touch    文件名</code></p><p>　　递归且强制删除目录/文件：<code>rm -rf  目录名</code></p><p>　　显示目录下的文件/目录：<code>ls -a</code>   (-a 表示列出所有文件，包括隐藏文件)    <code>ls -d</code>  (-d表示针对目录的，只列出目录本身)</p><p>　　浏览小文件并显示行号：<code>cat  -n 文件名</code>    （浏览大文件：cat -n 文件名  | more）</p><p>　　浏览大文件 并显示行号，百分比：<code>less -mN 文件名</code>  </p><p>　　追加：向文件的内容后面追加内容：<code>echo  &quot;内容&quot; &gt;&gt;  文件名</code></p><p>　　覆盖：用文件1的内容覆盖文件2里面的内容 ：  <code>cat  文件1  &gt;  文件2</code></p><p>　　控制台打印内容：<code>echo “xxxx”</code></p><p>　　查看文件后5行：<code>tail  -n 5 文件名</code>   （查看前5行：head -n 文件名）</p><p>　　创建快捷方式（软链接）：<code>ln -s  原文件  快捷方式名称</code></p><p>　　文件重命名 ： <code>mv  原文件名/目录名  新文件名/目录名</code></p><p>　　剪切（移动）：<code>mv  原文件名/目录    新的路径</code></p><p>　　复制：<code>cp  -r 原文件/目录   目标文件/目录</code>     （注意：复制目录必须加-r，表递归复制）</p><h3 id="１４．搜索文件-目录："><a href="#１４．搜索文件-目录：" class="headerlink" title="１４．搜索文件/目录："></a>１４．搜索文件/目录：</h3><p>　　按照名称查询某个目录下是否有某个文件：<code>find   搜索的目录  -name  要搜索的文件名</code></p><p>　　查询某个目录下属于某个用户的所有文件：       <code>find   搜索的目录   -user  用户名</code></p><h3 id="１５．用户操作："><a href="#１５．用户操作：" class="headerlink" title="１５．用户操作："></a>１５．用户操作：</h3><p>　　切换为某个用户：<code>su  -用户名</code></p><p>　　切换为管理员用户即root用户：<code>su -</code>         </p><p>　　以管理员权限执行一条命令 ：<code>sudo 要执行的命令</code>           </p><p>　　创建用户/组：<code>useradd/groupadd</code></p><p>　　<code>useradd -g 所属的组名 用户名</code>（注意：指定用户所属的组（前提：组存在））</p><p>　　改变文件所属用户/组：<code>chown/chgrp</code></p><p>　　改变用户所属组：<code>usermod</code></p><p>　　改权限：<code>chmod</code></p><p>　　改运行级别：<code>chkconfig  --level</code>   0到6的数字   服务名  on   （on 表开启，off表关闭）</p><p>　　查看用户所属组：<code>id 用户名</code></p><p>　　查看有哪些用户：<code>cat /etc/passwd</code></p><p>　　查看有哪些组：<code>cat /etc/group</code></p><p>　　设置密码  <code>passwd 用户名</code></p><h3 id="１６．查看以前敲过的所有命令：history-（常与管道连用，history-more）"><a href="#１６．查看以前敲过的所有命令：history-（常与管道连用，history-more）" class="headerlink" title="１６．查看以前敲过的所有命令：history           （常与管道连用，history | more）"></a>１６．查看以前敲过的所有命令：<code>history</code>           （常与管道连用，history | more）</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;768px&quot; height=&quot;367px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/Linux/linux-3.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zzwwqq.xyz/categories/Linux/"/>
    
    
      <category term="Linux常用指令" scheme="https://zzwwqq.xyz/tags/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux的安装</title>
    <link href="https://zzwwqq.xyz/Linux%E7%9A%84%E5%AE%89%E8%A3%85.html"/>
    <id>https://zzwwqq.xyz/Linux的安装.html</id>
    <published>2019-03-21T11:06:53.000Z</published>
    <updated>2019-03-22T06:19:17.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p> 上一节我们了解了Linux的一些基本概念,这一节我们将开始安装Linux系统,Linux需要一个环境，我们需要创建一个虚拟机，然后在虚拟机上安装一个Centos系统来学习.</p><h2 id="什么是虚拟机"><a href="#什么是虚拟机" class="headerlink" title="什么是虚拟机?"></a>什么是虚拟机?</h2><p><img src="http://cdn.zzwwqq.xyz/static/images/Linux/linux-2.2.1.png" alt></p><h2 id="安装虚拟机软件VMware"><a href="#安装虚拟机软件VMware" class="headerlink" title="安装虚拟机软件VMware:"></a>安装虚拟机软件VMware:</h2><p>Vmware 下载地址    <a href="http://pan.baidu.com/s/1eQxOVPC" target="_blank" rel="noopener">VMWare10</a></p><h2 id="创建虚拟机空间"><a href="#创建虚拟机空间" class="headerlink" title="创建虚拟机空间:"></a>创建虚拟机空间:</h2><p>安装好 vmware 后，就可以创建虚拟机空间了: 点击新建虚拟机</p><p><img src="http://cdn.zzwwqq.xyz/static/images/Linux/linux-2.3.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/Linux/linux-2.4.1.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/Linux/linux-2.5.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/Linux/linux-2.6.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/Linux/linux-2.7.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/Linux/linux-2.8.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/Linux/linux-2.9.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.10.png" alt></p><h2 id="安装CentOS系统"><a href="#安装CentOS系统" class="headerlink" title="安装CentOS系统:"></a>安装CentOS系统:</h2><p>安装系统之前，需要先去下载一个镜像文件:</p><p>CentOS下载地址：</p><p>​        网易镜像：<a href="http://mirrors.163.com/centos/6/isos/" target="_blank" rel="noopener">网易镜像</a><br>​        搜狐镜像：<a href="http://mirrors.sohu.com/centos/6/isos" target="_blank" rel="noopener">搜狐镜像</a></p><p>​        <a href="http://mirrors.aliyun.com/centos/7/isos/x86_64" target="_blank" rel="noopener">阿里云CentOS7镜像: </a> 可以选择第一个：CentOS-7-x86_64-DVD-1708.iso 进行下载即可。</p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.11.png" alt></p><p>　　　　这里找到Ｌｉｎｕｘ系统的iso镜像(即.iso后缀)文件</p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.12.png" alt></p><p>　　　　这里如果选择OK,此时会联网检查系统的完整性,会等待很久,所以这里选择skip.</p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.13.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.14.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.15.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.16.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.17-1553176149774.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.18.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.19.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.21-1.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.20.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.21.png" alt></p><p><img src="http://cdn.zzwwqq.xyz/static/images/linux-2.23.1.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img width=&quot;768px&quot; height=&quot;367px&quot; src=&quot;http://cdn.zzwwqq.xyz/static/images/Linux/linux-2.1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zzwwqq.xyz/categories/Linux/"/>
    
    
      <category term="Linux的安装" scheme="https://zzwwqq.xyz/tags/Linux%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
